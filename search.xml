<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[交大校草西工大校花]]></title>
    <url>%2F%E4%BA%BA%E7%94%9F%2F%E4%BA%A4%E5%A4%A7%E6%A0%A1%E8%8D%89%E8%A5%BF%E5%B7%A5%E5%A4%A7%E6%A0%A1%E8%8A%B1%2F</url>
    <content type="text"><![CDATA[西安交通大学机械学院2015级博士研究生 崔敏超 崔敏超本科就读于西安交通大学机械学院车辆工程系，随后进入本校长学制学习，博士期间于日本进行双学位学习。 “惊人的成果与高效的产出”是他的代名词，在校期间，他发表论文52篇，申报专利46项，参与国际学术会议30余次，先后获国家奖学金6次，获得学术之星，优秀研究生干部，西安交通大学优秀研究生标兵，第十一届中国青少年科技创新奖等诸多荣誉，在德岛大学攻读学位期间，被破格聘为研究助理和教学助理，被推荐为日本学术振兴会育才奖候选人······但是在他看来，自己并没有过人的记忆力，也没有轻轻松松就考试第一的惯例，学习与科研更重要的是勤奋与努力。 崔敏超认为，高校科研的最主要职责是探索新原理，去为企业的生产试错验证，而这也是国家企业发展的必要动力。因此，崔敏超所在的小组不仅会选择国外权威期刊，更加不会忽视国内期刊的投递，既争取做国际的标杆，又努力促进国内技术的优先发展。他认为，在国内期刊上发表科研成果，做国内创新技术的传播者，补足国内技术短板，是当务之急。 在大多数人的观点中，工科男一直以木讷少言的刻板形象存在于高校中，而崔敏超用自己的亲身经历告诉大家，工科生显然并非如此。 崔敏超擅长沟通，在日本就读双学位期间，更是以一场聚会赢得了日本学生的好感，改变了他们对中国学生“不善交际、谨小慎微”的片面认知。或许在学术生态圈，活跃的交际是调试科研工作者生活最好的良药。 在谈到何时出国比较合适时，崔敏超认为，在国内修读硕士以了解如何科研、如何沟通，在博士期间出国学习，应该是更好的选择。以他的经历来看，部分过早出国的同学由于语言沟通不佳或者科研能力不完善而困难重重。崔敏超认为，正是在交大的硕士学习，对于科研技术、方法和语言的熟练掌握，帮助他不惧交流，科研进展迅速，破格提前获得德岛大学的博士学位。 西北工业大学2015级软件工程专业的新晋“学神” 白雨桐 白雨桐在大学四年期间，获得3年软件工程专业综合排名第一、3年西北工业大学优秀学生标兵、3年获国家奖学金、西北工业大学特等奖学金、2年获宝钢教育基金优秀学生奖，还有包括世界大学生超级计算机竞赛等各类国际级或国家级奖项十余项，以本科生身份发表论文3篇，拥有专利十余项，还接到了美国西北大学、华盛顿圣路易斯大学、普渡大学等6所大学的PhD Offer······你能想象吗？在她的个人简介上，个人获奖和团队竞赛获奖写满了5页PPT！ 白雨桐坦言：“当年，我是西工大在江苏省录取学生中的最后一名。”由于高考成绩不理想，与自己心爱的专业失之交臂，从小几乎没怎么接触过计算机的她，却选择了一门自己完全不懂的专业——软件工程。 如今，已经是大四毕业生的白雨桐，回看这段过往，充满了感慨。正是这样的选择，让她找到了自己真正热爱的专业。 “后来我逐渐明白了，在真正了解一个事物之前，是没有资格说自己喜不喜欢的。而当我真正深入到软件工程专业后，当我在一个个具体难题被破解后，我就完全喜欢上了这个专业方向，喜欢上了这种自己解决问题的过程。”白雨桐笑着说。 白雨桐在大学一年级还没结束的时候，就给自己定下了3个研究方向。“我的研究方向非常散，但我在参加机器人大赛或写代码时遇到了具体问题，到处找人请教，再自己分析探索。”白雨桐说。 正是因为这样的执着的付出、一往无前的拼搏。她所在的团队斩获2018年IEEE OES SAUVC 水下航行器比赛国际冠军，IEEE ICRA AI Challenge 人工挑战赛Finalist 特等奖提名，2017年世界大学生超级计算机竞赛Application Innovation单项国际冠军，2017年全国机器人锦标赛暨第八届国际仿人机器人奥林匹克大赛服务类冠军等。 通过这些活动，白雨桐收获的不仅是各种沉甸甸的奖项，还有专业上的不断精进。她获得《多自由度人形机器人》《一种可群体工作的三足机器人》《基于强化学习的机器人路径规划》《基于深度学习的自然语言处理》等10余项专利。有1篇顶级会议论文已被接收，2篇顶级会议论文（第一作者）在投，还有1篇与西工大老师合作发表SCI期刊论文。 然而，这个过程并非一帆风顺。2017年，白雨桐作为队长带领大家参加世界大学生超级计算机竞赛，为此，他们准备了足足半年，但在首轮比赛中，由于主办方设备故障，团队写了十几个小时的程序毁于一旦，成绩归零。“所有队员都崩溃了。”看着毫无斗志的队员，身为队长的白雨桐并没有伤心的权力，她必须为大家鼓舞士气，“比赛还没有结束，后面的单项比赛我们还很有优势，如果现在就打不起精神，我们干脆回家好了。”最终，在大家的共同努力下，团队斩获了Application Innovation 单项国际冠军，这在西工大的历史上，也是首次。 已经大四的白雨桐，计划于今年9月前往美国攻读CS PhD项目，方向为人工智能。目前，她已经获得美国排名Top10的全奖PhD offers，包括美国西北大学、华盛顿圣路易斯大学、普渡大学、麻省大学阿姆赫斯特分校、明尼苏达双城等全奖PhD offer，以及香港中文大学的PhD Offer。 “还有几所大学的offer没出来，我想等一等。不过，只要是人工智能方向的，问题应该不大。博士期间，还是主要靠自己吧。”白雨桐一副“认真脸”地说，“总之就是一定要赶上人工智能科技革命的大潮，然后尽自己的力量，做一些事情。” 突然想起，在白雨桐的许多PPT中，她总喜欢在最后一页写下一句话：“愿吾可敬可爱洁白健全之新青年，必于消沉绝望中唤予以兴起，扛民族复兴之重任！——陈独秀“ 那些看上去毫不费力的人生 背后总有不懈的努力 ONE学长相信 只要努力拼搏 你也会成为下一个“学神” 加油！ 今天距离2016年8月26日2016级新生正式报到已经过去将近两个月了，鉴于新生在刚刚步入大学后会遇到的问题，软件与微电子学院学生会特地对2016级标兵白雨桐学姐进行了专访，来解答新生们在学习和生活中遇到的一些问题和困惑。 其实大部分新生对白雨桐学姐都不陌生，大部分人在国庆假期结束后的答辩会中都对这位学姐有所了解。作为江苏省毕业生的学姐也十分乐意向我们这些直系后辈分享自己的学习生活经验，以便大家对自己的学习生活乃至今后的人生都有所认识。 以效率追赶时间 正如白学姐在答辩时所强调的效率学习，学姐是一个与时间赛跑的人。大一就加入了足球机器人基地的学姐，周一、周三、周五的早上以及周日都要投入集训中去，而在假期的时间也被集训和各种项目充斥，“自从大一的十月份开始就再也没有能抽出一个下午去学习的时间”。但是，一颗专注的心从不畏惧时间的挑战，“别人考90分可能是考前泡图书馆泡一个星期，而我只能连着熬三天夜熬到凌晨四点”，“我是那种一天全神贯注在一科上，想要做什么就一定要做好的人”。正如冰心所说“成功之花,人们往往惊羡它现时的明艳,然而当初,它的芽儿却浸透了奋斗的泪泉,洒满了牺牲的血雨”，我们所见的是学霸们成功的光彩，而成功却不是一蹴而就的，是他们迈着一步一步沉重坚定地步伐开拓而来。成功不是怠惰的人能抓到的。 那么如何以效率追赶时间呢？学姐给我们分享了她的学习。大学里的自学能力特别重要，而自学能力主要体现在自学的深度与速度体现，所谓师傅领进门修行在个人，课程的主要目的是为我们指明方向，而路还要自己走。为了抓住一切时间，学姐在选修课的选择上也颇有斟酌——只选与专业课相关选修，这样就能拓展眼界，将一切时间用在提升自己上。“社团也同样如此，”学姐给我们讲到了她对社团活动的看法，“要保证你加入的社团，可以让你收获到你想要的东西，因为只有强大的社团才有强大的人一起竞争、帮助、进步。”对于我们大一的萌新们，学习尝试ACM-ICPC是很重要的，一个优化的程序，就算仅是快0.1秒，在多次运行后的优势也是巨大的。另外，在人工智能不断发展的今天，机器人也是值得我们去了解的。 以兴趣推动发展 与成功相随的要素，永远也少不了兴趣。白学姐与软件之缘还要从高考的失利开始。 高考的失利使学姐只能在后几个专业选择，带着证明自己、磨炼自己的倔强，学姐选择了对其而言一个全新的领域——软件工程。开始的学习生活自然是困难。但是，兴趣总是在不经意间萌发，在基础越来越扎实后，学姐掌握了计算机思维，从此投入到了编程之中。对于自己感兴趣的事，“只要做就一定要做好”，这就是学姐的信条，这就是学姐的动力，这就是成功背后无尽的坚持。“不服输就是别人都做不到的事情，自己也要做出来。”只做到别人能做到的，这只是普通人，而能够做到别人做不到的才能让自己脱颖而出。 作为大学生，在我们的心理总有一股热血，一种渴望成功的激情，但是有的时候沉淀也是颇为重要的。如果大学生过早地接触企业，在企业中无法做到自己应做的任务时，对自己的提升不会很大。把自己积淀成一个强大的人，有更强的竞争力，成为企业争抢的“香饽饽”，不是更好吗？ 爱情小剧场 对于西工大的学生们，尤其是各位单身的男生们，想不想知道如何让女生倾心呢？学姐作为爱情、学业双丰收的成功人士，向我们透露了她的爱情观。 “爱情是一种责任，不是说聊得开了就要在一起，而是要在恋爱的过程中相互学习、相互提高，做的每一件事要为对方为自己的发展考虑，这样才是负责人的爱情”，吸引女生的男生一定要“三观正，有上进心，有责任心”其实，正如学姐所说，爱情是共同进步的过程，如果一方在披荆斩棘而另一方在原地踏步，这样的爱情何来天长地久？曾有一句格言“爱情源于付出而非回报”，付出的越多，爱得便越深。每一点的付出都是爱情藤蔓上的绿叶，绿叶多了，爱情才更加茂盛。 学霸的学习指导 在学习生活的规划上，白雨桐学姐有句话令人印象深刻，她说：“我曾经总是认为自己现在的计划是完全正确的，但是随着事情的发展和我自己的前进，我总是会觉得以前的计划是不够正确的。”其实这并不是说我们就不需要计划，而是说，我们不要陷入自己的计划当中，否则无异于画地为牢。适当的计划是要进行的，我们必须确定自己当前的发展方向以及自己的目标。然而与此同时，我们所经历的事情在变化，甚至时代世界也在变化，计划这种东西不过是协助我们在生活中更加具有条理。而这种条理相信也正是她在大一就成为标兵的重要原因之一。 虽说学姐是在软件与微电子学院的各项课程中都取得了优异的成绩，但事实上，她在进入西北工业大学后才第一次接触到软件工程这方面的事物，至于选择软件工程的原因，她表示：“当时高考中考了一个很尴尬的分数，这注定了我在西工大的选择并不充裕，而相较其他几个专业，我更希望通过学习软件工程来开始一段新的生活。”学姐给人最深的印象其实是身为一个软件工程的初学者，她立即爱上了这门专业。当被问及是如何喜欢上软件工程时，她说，其实是从对编程有所领悟和感觉时，也就是说，想要喜欢上一件事物，首先要了解和感觉它。 一个人的志向高低，很大程度上影响了未来成就的高低，而作为软微学子的我们要以“综合全面知识站在这个世界更高的地方”。“计算机的思维与人的复杂思维是不同的，”学姐建议道“一定要学会用计算机的思维去思考。” 另外，学习时一定要打起百分百的精力，在学习前要调整好状态。调整状态时还要注意，人一般放松过头就很难拉回来，所以千万要注意适度。现在我们的编程还是比较简单的，但是简单的编程也要去考虑最优化，提高处理效率。增加自己的经验。 对于身兼职务的小伙伴们，最好用自己零碎的时间去做工作，要好好地体悟自己的工作，从自己的工作中领悟一些知识，培养一些能力。 高数一定是很多人都苦恼的学科，学姐建议我们一定要不只是刷题，课本上的证明要一条条真正弄懂吃透，能够说服自己。 说完高数，我们来说说英语，作为一门语言，听是十分重要的，看美剧有一定的帮助。但是最好不要直接被单词，在阅读中被单词，会有特别地映像。 学习不是埋头于书本就可以学好的，把学习与实践结合起来，在实践中找到不足，专攻自己的弱项能极大提高学习效率。 网络是非常巨大的资源，遇到不会的就去查，运用好网络就像为火箭增加一级推进器。一个好的辅导书就是学习的标尺，找一本严格的，系统的，准确的，权威的辅导书比问同学来的更好更准确。在这里推荐一个出版社机械工业出版社。 作为大一新生的我们可能会在学习上有迷茫，不免会随波逐流。但是我们在人流之中应有自己的想法，看到自己的不足，做适合自己的事情。 书山有路勤为径，学海无涯苦作舟。看完学姐的建议，大家有没有热血沸腾，找到了学习的方向呢？期待下一个标兵就是你哦。 （软件与微电子学院 记者部）]]></content>
      <categories>
        <category>人生</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[“阿法狗”之父：关于围棋，人类3000年来犯了一个错]]></title>
    <url>%2F%E6%9D%82%E6%96%87%E9%9B%86%2F%E2%80%9C%E9%98%BF%E6%B3%95%E7%8B%97%E2%80%9D%E4%B9%8B%E7%88%B6%EF%BC%9A%E5%85%B3%E4%BA%8E%E5%9B%B4%E6%A3%8B%EF%BC%8C%E4%BA%BA%E7%B1%BB3000%E5%B9%B4%E6%9D%A5%E7%8A%AF%E4%BA%86%E4%B8%80%E4%B8%AA%E9%94%99%2F</url>
    <content type="text"><![CDATA[AlphaGo之父杰米斯·哈萨比斯（Demis Hassabis）近日在母校英国剑桥大学做了一场题为“超越人类认知的极限”的演讲，解答了世人对于人工智能，对于阿尔法狗的诸多疑问——过去3000年里人类低估了棋局哪个区域的重要性？阿尔法狗去年赢了韩国职业九段李世石靠哪几个绝招？今年年初拿下数位国际大师的神秘棋手Master究竟是不是阿尔法狗？为什么围棋是人工智能难解之谜？ 杰米斯·哈萨比斯，Deep Mind创始人， AlphaGo之父。 杰米斯·哈萨比斯，Deep Mind创始人，AlphaGo（阿尔法狗）之父， 4岁开始下象棋，8岁时在棋盘上的成功促使他开始思考两个至今令他困扰的问题：第一，人脑是如何学会完成复杂任务的？第二，电脑能否做到这一点？17岁时，哈萨比斯就负责了经典模拟游戏《主题公园》的开发，并在1994年发布。他随后读完了剑桥大学计算机科学学位，2005年进入伦敦大学学院，攻读神经科学博士学位，希望了解真正的大脑究竟是如何工作的，以此促进人工智能的发展。2014年他创办公司Deep Mind, 公司产品阿尔法狗在2016年大战围棋冠军李世石事件上一举成名。 哈萨比斯在当天的演讲中透露了韩国棋手李世石去年输给阿尔法狗的致命原因，他最后也提到了阿尔法狗即将迎战的中国棋手柯洁，他说，“柯洁也在网上和阿尔法狗对决过，比赛之后柯洁说人类已经研究围棋研究了几千年了，然而人工智能却告诉我们，我们甚至连其表皮都没揭开。异曲同工，柯洁提到了围棋的真理，我们在这里谈的是科学的真理。” AlphaGo（阿尔法狗）之父在剑桥大学历时45分钟的演讲，干货满满，请不要漏掉任何一个细节： 非常感谢大家今天能够到场，今天，我将谈谈人工智能，以及DeepMind近期在做些什么，我把这场报告命名为“超越人类认知的极限”，我希望到了报告结束的时候，大家都清晰了解我想传达的思想。 1.你真的知道什么是人工智能吗？ 对于不知道DeepMind公司的朋友，我做个简单介绍，我们是在2010年于伦敦成立了这家公司，在2014年我们被谷歌收购，希望借此加快我们人工智能技术的脚步。我们的使命是什么呢？我们的首要使命便是解决人工智能问题；一旦这个问题解决了，理论上任何问题都可以被解决。这就是我们的两大使命了，听起来可能有点狡猾，但是我们真的相信，如果人工智能最基本的问题都解决了的话，没有什么问题是困难的。 那么我们准备怎样实现这个目标呢？DeepMind现在在努力制造世界上第一台通用学习机，大体上学习可以分为两类：一种就是直接从输入和经验中学习，没有既定的程序或者规则可循，系统需要从原始数据自己进行学习；第二种学习系统就是通用学习系统，指的是一种算法可以用于不同的任务和领域，甚至是一些从未见过的全新领域。大家肯定会问，系统是怎么做到这一点的？ 其实，人脑就是一个非常明显的例子，这是可能的，关键在于如何通过大量的数据资源，寻找到最合适的解决方式和算法。我们把这种系统叫做通用人工智能，来区别于如今我们当前大部分人在用的仅在某一领域发挥特长的狭义人工智能，这种狭义人工智能在过去的40-50年非常流行。 IBM 发明的深蓝系统（Deep Blue）就是一个很好的狭义人工智能的例子，他在上世纪90年代末期曾打败了国际象棋冠军加里·卡斯帕罗夫（Gary Kasporov） 。如今，我们到了人工智能的新的转折点，我们有着更加先进、更加匹配的技术。 1997年5月，IBM与世界国际象棋冠军加里·卡斯帕罗夫对决 2.如何让机器听从人类的命令？ 大家可能想问机器是如何听从人类的命令的，其实并不是机器或者算法本身，而是一群聪明的编程者智慧的结晶。他们与每一位国际象棋大师对话，汲取他们的经验，把其转化成代码和规则，组建了人类最强的象棋大师团队。但是这样的系统仅限于象棋，不能用于其他游戏。对于新的游戏，你需要重新开始编程。在某种程度上，这些技术仍然不够完美，并不是传统意义上的完全人工智能，其中所缺失的就是普适性和学习性。我们想通过“增强学习”来解决这一难题。在这里我解释一下增强学习，我相信很多人都了解这个算法。 首先，想像一下有一个主体，在AI领域我们称我们的人工智能系统为主体，它需要了解自己所处的环境，并尽力找出自己要达到的目的。这里的环境可以指真实事件，可以是机器人，也可以是虚拟世界，比如游戏环境；主体通过两种方式与周围环境接触；它先通过观察熟悉环境，我们起初通过视觉，也可以通过听觉、触觉等，我们也在发展多感觉的系统； 第二个任务，就是在此基础上，建模并找出最佳选择。这可能涉及到对未来的预期，想像，以及假设检验。这个主体经常处在真实环境中，当时间节点到了的时候，系统需要输出当前找到的最佳方案。这个方案可能或多或少会改变所处环境，从而进一步驱动观察的结果，并反馈给主体。 简单来说，这就是增强学习的原则，示意图虽然简单，但是其中却涉及了极其复杂的算法和原理。如果我们能够解决大部分问题，我们就能够搭建普适人工智能。这是因为两个主要原因：首先，从数学角度来讲，我的合伙人，一名博士，他搭建了一个系统叫‘AI-XI’，用这个模型，他证明了在计算机硬件条件和时间无限的情况下，搭建一个普适人工智能，需要的信息。另外，从生物角度来讲，动物和人类等，人类的大脑是多巴胺控制的，它在执行增强学习的行为。因此，不论是从数学的角度，还是生物的角度，增强学习是一个有效的解决人工智能问题的工具。 3.为什么围棋是人工智能难解之谜？ 接下来，我要主要讲讲我们最近的技术，那就是去年诞生的阿尔法狗；希望在座的大家了解这个游戏，并尝试玩玩，这是个非常棒的游戏。围棋使用方形格状棋盘及黑白二色圆形棋子进行对弈，棋盘上有纵横各19条直线将棋盘分成361个交叉点，棋子走在交叉点上，双方交替行棋，以围地多者为胜。围棋规则没有多复杂，我可以在五分钟之内教给大家。这张图展示的就是一局已结束，整个棋盘基本布满棋子，然后数一下你的棋子圈出的空间以及对方棋子圈出的空间，谁的空间大，谁就获胜。在图示的这场势均力敌的比赛中，白棋一格之差险胜。 白棋以一格之差险胜 其实，了解这个游戏的最终目的非常难，因为它并不像象棋那样，有着直接明确的目标，在围棋里，完全是凭直觉的，甚至连如何决定游戏结束对于初学者来说，都很难。围棋是个历史悠久的游戏，有着3000多年的历史，起源于中国，在亚洲，围棋有着很深的文化意义。孔子还曾指出，围棋是每一个真正的学者都应该掌握的四大技能之一（琴棋书画），所以在亚洲围棋是种艺术，专家们都会玩。 如今，这个游戏更加流行，有4000万人在玩围棋，超过2000多个顶级专家，如果你在4-5岁的时候就展示了围棋的天赋，这些小孩将会被选中，并进入特殊的专业围棋学校，在那里，学生从6岁起，每天花12个小时学习围棋，一周七天，天天如此。直到你成为这个领域的专家，才可以离开学校毕业。这些专家基本是投入人生全部的精力，去揣摩学习掌握这门技巧，我认为围棋也许是最优雅的一种游戏了。 像我说的那样，这个游戏只有两个非常简单的规则，而其复杂性却是难以想象的，一共有10170 （10的170次方） 种可能性，这个数字比整个宇宙中的原子数1080（10的80次方）都多的去了，是没有办法穷举出围棋所有的可能结果的。我们需要一种更加聪明的方法。你也许会问为什么计算机进行围棋的游戏会如此困难，1997年,IBM的人工智能DeepBlue（深蓝）打败了当时的象棋世界冠军GarryKasparov，围棋一直是人工智能领域的难解之谜。我们能否做出一个算法来与世界围棋冠军竞争呢？要做到这一点，有两个大的挑战： 一、搜索空间庞大（分支因数就有200），一个很好的例子，就是在围棋中，平均每一个棋子有两百个可能的位置，而象棋仅仅是20. 围棋的分支因数远大于象棋。 二、比这个更难的是，几乎没有一个合适的评价函数来定义谁是赢家，赢了多少；这个评价函数对于该系统是至关重要的。而对于象棋来说，写一个评价函数是非常简单的，因为象棋不仅是个相对简单的游戏，而且是实体的，只用数一下双方的棋子，就能轻而易举得出结论了。你也可以通过其他指标来评价象棋，比如棋子移动性等。 所有的这些在围棋里都是不可能的，并不是所有的部分都一样，甚至一个小小部分的变动，会完全变化格局，所以每一个小的棋子都对棋局有着至关重要的影响。最难的部分是，我称象棋为毁灭性的游戏，游戏开始的时候，所有的棋子都在棋盘上了，随着游戏的进行，棋子被对方吃掉，棋子数目不断减少，游戏也变得越来越简单。相反，围棋是个建设性的游戏，开始的时候，棋盘是空的，慢慢的下棋双方把棋盘填满。 因此，如果你准备在中场判断一下当前形势，在象棋里，你只需看现在的棋盘，就能告诉你大致情况；在围棋里，你必须评估未来可能会发生什么，才能评估当前局势，所以相比较而言，围棋难得多。也有很多人试着将DeepBlue的技术应用在围棋上，但是结果并不理想，这些技术连一个专业的围棋手都打不赢，更别说世界冠军了。 所以大家就要问了，连电脑操作起来都这么难，人类是怎样解决这个问题的？其实，人类是靠直觉的，而围棋一开始就是一个靠直觉而非计算的游戏。所以，如果你问一个象棋选手，为什么这步这样走，他会告诉你，这样走完之后，下一步和下下一步会怎样走，就可以达到什么样的目的。这样的计划，有时候也许不尽如人意，但是起码选手是有原因的。 然而围棋就不同了，如果你去问世界级的大师，为什么走这一步，他们经常回答你直觉告诉他这么走，这是真的，他们是没法描述其中的原因的。我们通过用加强学习的方式来提高人工神经网络算法，希望能够解决这一问题。 我们试图通过深度神经网络模仿人类的这种直觉行为，在这里，需要训练两个神经网络，一种是决策网络，我们从网上下载了成百万的业余围棋游戏，通过监督学习，我们让阿尔法狗模拟人类下围棋的行为；我们从棋盘上任意选择一个落子点，训练系统去预测下一步人类将作出的决定；系统的输入是在那个特殊位置最有可能发生的前五或者前十的位置移动；这样，你只需看那5-10种可能性，而不用分析所有的200种可能性了。 一旦我们有了这个，我们对系统进行几百万次的训练，通过误差加强学习，对于赢了的情况，让系统意识到，下次出现类似的情形时，更有可能做相似的决定。相反，如果系统输了，那么下次再出现类似的情况，就不会选择这种走法。我们建立了自己的游戏数据库，通过百万次的游戏，对系统进行训练，得到第二种神经网络。选择不同的落子点，经过置信区间进行学习，选出能够赢的情况，这个几率介于0-1之间，0是根本不可能赢，1是百分之百赢。 通过把这两个神经网络结合起来（决策网络和数值网络），我们可以大致预估出当前的情况。这两个神经网络树，通过蒙特卡洛算法，把这种本来不能解决的问题，变得可以解决。我们网罗了大部分的围棋下法，然后和欧洲的围棋冠军比赛，结果是阿尔法狗赢了，那是我们的第一次突破，而且相关算法还被发表在《自然》科学杂志。 接下来，我们在韩国设立了100万美元的奖金，并在2016年3月，与世界围棋冠军李世石进行了对决。李世石先生是围棋界的传奇，在过去的10年里都被认为是最顶级的围棋专家。我们与他进行对决，发现他有非常多创新的玩法，有的时候阿尔法狗很难掌控。比赛开始之前，世界上每个人（包括他本人在内）都认为他一定会很轻松就打赢这五场比赛，但实际结果是我们的阿尔法狗以4:1获胜。围棋专家和人工智能领域的专家都称这具有划时代的意义。对于业界人员来说，之前根本没想到。 4.棋局哪个关键区域被人类忽视了？ 这对于我们来说也是一生仅有一次的偶然事件。这场比赛，全世界28亿人在关注，35000多篇关于此的报道。整个韩国那一周都在围绕这个话题。真是一件非常美妙的事情。对于我们而言，重要的不是阿尔法狗赢了这个比赛，而是了解分析他是如何赢的，这个系统有多强的创新能力。阿尔法狗不仅仅只是模仿其他人类选手的下法，他在不断创新。在这里举个例子 ，这是第二局里的一个情况，第37步，这一步是我整个比赛中最喜欢的一步。在这里，黑棋代表阿尔法狗，他将棋子落在了图中三角标出的位置。为什么这步这么关键呢?为什么大家都被震惊到了。 图左：第二局里，第37步，黑棋的落子位置 图右：之前貌似陷入困境的两个棋子 其实在围棋中有两条至关重要的分界线，从右数第三根线。如果在第三根线上移动棋子，意味着你将占领这个线右边的领域。而如果是在第四根线上落子，意味着你想向棋盘中部进军，潜在的，未来你会占棋盘上其他部分的领域，可能和你在第三根线上得到的领域相当。 所以在过去的3000多年里，人们认为在第三根线上落子和第四根线上落子有着相同的重要性。但是在这场游戏中，大家看到在这第37步中，阿尔法狗落子在了第五条线，进军棋局的中部区域。与第四根线相比，这根线离中部区域更近。这可能意味着，在几千年里，人们低估了棋局中部区域的重要性。 有趣的是，围棋就是一门艺术，是一种客观的艺术。我们坐在这里的每一个人，都可能因为心情好坏产生成千上百种的新想法，但并不意味着每一种想法都是好的。而阿尔法狗却是客观的，他的目标就是赢得游戏。 5.阿尔法狗拿下李世石靠哪几个绝招？ 大家看到在当前的棋局下，左下角那两个用三角标出的棋子看起来好像陷入了困难，而15步之后，这两个棋子的力量扩散到了棋局中心，一直延续到棋盘的右边，使得这第37步恰恰落在这里，成为一个获胜的决定性因素。在这一步上阿尔法狗非常具有创新性。我本人是一个很业余的棋手，让我们看看一位世界级专家Michael Redmond对这一步的评价。 Michael是一位9段选手（围棋最高段），就像是功夫中的黑段一样，他说：“这是非常令人震惊的一步，就像是一个错误的决定。”在实际模拟中，Michael其实一开始把棋子放在了另外一个地方，根本没想到阿尔法狗会走这一步。像这样的创新，在这个比赛中，阿尔法狗还有许多。在这里，我特别感谢李世石先生，其实在我们赢了前三局的时候，他下去了。 2016年3月阿尔法狗大战世界围棋冠军李世石，以4:1的总分战胜了人类 那是三场非常艰难的比赛，尤其是第一场。因为我们需要不断训练我们的算法，阿尔法狗之前打赢了欧洲冠军，经过这场比赛，我们知道了欧洲冠军和世界冠军的差别。理论上来讲，我们的系统也进步了。但是当你训练这个系统的时候，我们不知道有多少是过度拟合的，因此，在第一局比赛结束之前，系统是不知道自己的统计结果的。所以，其实第一局，我们非常紧张，因为如果第一局输了，很有可能我们的算法存在巨大漏洞，有可能会连输五局。但是如果我们第一局赢了，证明我们的加权系统是对的。 不过，李世石先生在第四场的时候，回来了，也许压力缓解了许多，他做出了一步非常创新性的举动，我认为这是历史上的创新之举。这一步迷惑了阿尔法狗，使他的决策树进行了错误估计，一些中国的专家甚至称之为“黄金之举”。通过这个例子，我们可以看到多少的哲理蕴含于围棋中。这些顶级专家，用尽必生的精力，去找出这种黄金之举。其实，在这步里，阿尔法狗知道这是非常不寻常的一步，他当时估计李世石通过这步赢的可能性是0.007%，阿尔法狗之前没有见过这样的落子方式，在那2分钟里，他需要重新搜索决策计算。我刚刚已经提到过这个游戏的影响：28亿人观看，35000相关文章的媒体报道，在西方网售的围棋被一抢而空，我听说MIT（美国麻省理工学院）还有其他很多高校，许多人新加入了围棋社。 第四局里，李世石第78步的创新之举 我刚才谈到了直觉和创新，直觉是一种含蓄的表达，它是基于人类的经历和本能的一种思维形式，不需要精确计算。这一决策的准确性可以通过行为进行评判。在围棋里很简单，我们给系统输入棋子的位置，来评估其重要性。阿尔法狗就是在模拟人类这种直觉行为。创新，我认为就是在已有知识和经验的基础上，产生一种原始的，创新的观点。阿尔法狗很明显的示范了这两种能力。 6.神秘棋手Master究竟是不是阿尔法狗？ 那么我们今天的主题是“超越人类认知的极限”，下一步应该是什么呢？从去年三月以来，我们一直在不断完善和改进阿尔法狗，大家肯定会问，既然我们已经是世界冠军了，还有什么可完善的？ 其实，我们认为阿尔法狗还不是完美的，还需要做更多的研究。 首先，我们想要继续研究刚才提到的和李世石的第四局的比赛，来填充知识的空白；这个问题其实已经被解决了，我们建立了一个新的阿尔法狗分系统，不同于主系统，这个分支系统是用来困惑主系统的。我们也优化了系统的行为，以前我们需要花至少3个月来训练系统，现在只需要一周时间。 第二，我们需要理解阿尔法狗所采取的决定，并对其进行解释；阿尔法狗这样做的原因是什么，是否符合人类的想法等等；我们通过对比人类大脑对于不同落子位置的反应以及阿尔法狗对于棋子位置的反应，以期找到一些新的知识；本质上就是想让系统更专业。我们在网络上与世界顶级的专家对决，一开始我们使用了一个假名（Master），在连胜之后被大家猜出是阿尔法狗。这些都是顶级的专家，我们至今已赢了60位大师了。如果你做个简单的贝叶斯分析，你会发现阿尔法狗赢不同对手的难易也不一样。而且，阿尔法狗也在不断自我创新，比如说图中右下角这个棋子（圆圈标处），落在第二根线里，以往我们并不认为这是个有效的位置。实际上，韩国有的团队预约了这些游戏，想研究其中新的意义和信息。 阿尔法狗自我创新，落在第二格线的旗子 柯洁，既是中国的围棋冠军，也是目前的世界围棋冠军，他才19岁。他也在网上和阿尔法狗对决过，比赛之后他说人类已经研究围棋研究了几千年了，然而人工智能却告诉我们，我们甚至连其表皮都没揭开。他也说人类和人工智能的联合将会开创一个新纪元，将共同发现围棋的真谛。异曲同工，柯洁提到了围棋的真理，我们在这里谈的是科学的真理。 红遍网络的神秘棋手Master2017年1月3日在腾讯围棋对弈平台赢了柯洁 Master执白中盘胜柯洁，Master就是AlphaGo的升级版 那么围棋的新纪元是否真的到来了呢？围棋史上这样的划时代事件曾经发生过两次，第一次是发生在1600年左右的日本，20世纪30-40年代的日本，日本一位当时非常杰出的围棋高手吴清源提出了一个全新的关于围棋的理论，将围棋提升到了一个全新的境界。大家说如今，阿尔法狗带来的是围棋界的第三次变革。 7.为什么人工智能“下围棋”强于“下象棋”？ 我想解释一下，为什么人工智能在围棋界所作出的贡献，要远大于象棋界。如果我们看看当今的世界国际象棋冠军芒努斯·卡尔森，他其实和之前的世界冠军没什么大的区别，他们都很优秀，都很聪明。但为什么当人工智能出现的时候，他们可以远远超越人类？我认为其中的原因是，国际象棋更注重战术，而阿尔法狗更注重战略。如今世界顶级的国际象棋程序再不会犯技术性的错误，而在人类身上，不可能不犯错。第二，国际象棋有着巨大的数据库，如果棋盘上少于9个棋子的时候，通过数学算法就可以计算出谁胜谁败了。计算机通过成千上万的迭代算法，就可以计算出来了。因此，当棋盘上少于九个棋子的时候，下象棋时人类是没有办法获胜的。 因此，国际象棋的算法已经近乎极致，我们没有办法再去提高它。然而围棋里的阿尔法狗，在不断创造新的想法，这些全新的想法，在和真人对决的时候，顶级的棋手也可以把其纳入到考虑的范畴，不断提高自己。 就如欧洲围棋冠军樊麾（第一位与阿尔法狗对阵的人类职业棋手）所说的那样，在和阿尔法狗对决的过程中，机器人不断创新的下法，也让人类不断跳出自己的思维局限，不断提高自己。大家都知道，经过专业围棋学校里30多年的磨练，他们的很多思维已经固化，机器人的创新想法能为其带来意想不到的灵感。我真的相信如果人类和机器人结合在一起，能创造出许多不可思议的事情。我们的天性和真正的潜力会被真正释放出来。 8.阿尔法狗不为了赢取比赛又是为了什么？ 就像是天文学家利用哈勃望远镜观察宇宙一样，利用阿尔法狗，围棋专家可以去探索他们的未知世界，探索围棋世界的奥秘。我们发明阿尔法狗，并不是为了赢取围棋比赛，我们是想为测试我们自己的人工智能算法搭建一个有效的平台，我们的最终目的是把这些算法应用到真实的世界中，为社会所服务。 当今世界面临的一个巨大挑战就是过量的信息和复杂的系统，我们怎么才能找到其中的规律和结构，从疾病到气候，我们需要解决不同领域的问题。这些领域十分复杂，对于这些问题，即使是最聪明的人类也无法解决的。 我认为人工智能是解决这些问题的一个潜在方式。在如今这个充斥着各种新技术的时代，人工智能必须在人类道德基准范围内被开发和利用。本来，技术是中性的，但是我们使用它的目的和使用它的范围，大大决定了其功能和性质，这必须是一个让人人受益的技术才行。 我自己的理想是通过自己的努力，让人工智能科学家或者人工智能助理和医药助理成为可能，通过该技术，我们可以真正加速技术的更新和进步。 注：本文作者系英国剑桥大学神经学博士生，AlphaGo之父哈萨比斯在剑桥大学的校友 转载自公众号“牛弹琴”https://mp.weixin.qq.com/s/DOq2YT5F4H2sd12Db6go7g]]></content>
      <categories>
        <category>杂文集</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[AI速查表神经网络，机器学习，深度学习，大数据]]></title>
    <url>%2F%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%2FAI%E9%80%9F%E6%9F%A5%E8%A1%A8%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%EF%BC%8C%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%EF%BC%8C%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%EF%BC%8C%E5%A4%A7%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[[TOC] 引言作者：Stefan Kojouharov 编译：ronghuaiyang 原文链接：https://becominghuman.ai/cheat-sheets-for-ai-neural-networks-machine-learning-deep-learning-big-data-678c51b4b463 过去的几个月中，我都在收集AI速查表。我时不时的分享给同学和朋友，他们经常问我要。所以我决定整理一下，发出来。为了让这件事情更加有趣，我对每个主题加了点描述。 这个应该是史上最全的了，希望你喜欢… 神经网络 神经网络图 机器学习概述 机器学习: Scikit-learn算法这个速查表可以帮助你为你的任务找到合适的estimator，这个是工作中最困难的地方。流向图帮助你查找文档，estimator也能大致的帮助你更加好的理解你的问题，以及如何解决问题。 Scikit-LearnScikit-learn 是一个开源的机器学习Python库。功能包括分类，回归，聚类，算法包括支持向量机，随机森林，梯度提升，k均值和密度聚类算法。而且和Python的数值处理库如Numpy和SciPy能够互通。 机器学习 : 算法速查表 这是一个来自Microsoft Azure的机器学习速查表，你可以为你的预测任务选取合适的机器学习的算法。首选，速查表会问你数据的形式，然后给你一个适合你的任务的最佳的算法建议。 用Python做数据科学 TensorFlow在2017年的5月，Google发布了第二代的TPU，第二代的TPU有高达180 teraflops的性能，64个TPU的集群可以提供11.5 petaflops的计算能力。 Keras在2017年，Google的TensorFlow决定在其核心库中支持Keras。Keras是一套接口，而不是一个机器学习的框架。它提供一套高级的，更加直接的抽象功能，使得配置一个神经网络更加的容易，而不用管背后是哪个计算库。 NumpyNumpy是一个没有优化过的解释器，目的是用Python来实现CPython中的东西。使用这个版本的数学计算往往比较慢。Numpy提供了多维数组的计算和操作，非常的有效，当需要重用代码时，大部分的内部的循环都是使用Numpy。 Pandas这个名字是来自于 “panel data”，是一个经济学的词语，用来处理多维度的结构化的数据。 数据整理 data wrangler “data wrangler”这个词开始于流行文化的渗透。在2017年的电影 Kong: Skull Island，其中一个角色，被介绍为“Steve Woodward, our data wrangler”。 ScipyScipy是基于Numpy的数组的对象构建的，是Numpy的一部分，包括的工具如 Matplotlib, pandas and SymPy，还有一个科学计算的扩展库。Numpy和其他的一些科学计算工具如 MATLAB, GNU Octave, and Scilab很像。Numpy的技术栈也有时候叫做SciPy 技术栈。 Matplotlib matplotlib是一个基于Python的绘图库，是Numpy的一个扩展。提供了面向对象的API。 pyplot是一个matplotlib的模块，提供了类似Matlab的绘图接口，可以像Matlab一样简单易用，而且免费。 资源数据科学速查表: https://www.datacamp.com/community/tutorials/python-data-science-cheat-sheet-basics 数据整理速查表: https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf 数据整理: https://en.wikipedia.org/wiki/Data_wrangling Keras速查表: https://www.datacamp.com/community/blog/keras-cheat-sheet#gs.DRKeNMs Keras: https://en.wikipedia.org/wiki/Keras 机器学习速查表: https://ai.icymi.email/new-machinelearning-cheat-sheet-by-emily-barry-abdsc/ 机器学习速查表: https://docs.microsoft.com/en-in/azure/machine-learning/machine-learning-algorithm-cheat-sheet 机器学习速查表: http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html Matplotlib速查表: https://www.datacamp.com/community/blog/python-matplotlib-cheat-sheet#gs.uEKySpY Matpotlib: https://en.wikipedia.org/wiki/Matplotlib 神经网络速查表: http://www.asimovinstitute.org/neural-network-zoo/ 神经网络图速查表: http://www.asimovinstitute.org/blog/ 神经网络: https://www.quora.com/Where-can-find-a-cheat-sheet-for-neural-network Numpy速查表: https://www.datacamp.com/community/blog/python-numpy-cheat-sheet#gs.AK5ZBgE NumPy: https://en.wikipedia.org/wiki/NumPy Pandas速查表: https://www.datacamp.com/community/blog/python-pandas-cheat-sheet#gs.oundfxM Pandas: https://en.wikipedia.org/wiki/Pandas_(software) Pandas速查表: https://www.datacamp.com/community/blog/pandas-cheat-sheet-python#gs.HPFoRIc Scikit速查表: https://www.datacamp.com/community/blog/scikit-learn-cheat-sheet Scikit-learn: https://en.wikipedia.org/wiki/Scikit-learn Scikit-learn速查表: http://peekaboo-vision.blogspot.com/2013/01/machine-learning-cheat-sheet-for-scikit.html Scipy速查表: https://www.datacamp.com/community/blog/python-scipy-cheat-sheet#gs.JDSg3OI SciPy: https://en.wikipedia.org/wiki/SciPy TesorFlow速查表: https://www.altoros.com/tensorflow-cheat-sheet.html 本文可以任意转载，转载时请注明作者及原文地址。 作者：ronghuaiyang 链接：https://www.jianshu.com/p/31aac5ec6a54 來源：简书 简书著作权归作者所有，任何形式的转载都请联系作者获得授权并注明出处。]]></content>
      <categories>
        <category>数据挖掘</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[5个快速而简单的数据可视化方法和Python代码]]></title>
    <url>%2FPython%2F5%E4%B8%AA%E5%BF%AB%E9%80%9F%E8%80%8C%E7%AE%80%E5%8D%95%E7%9A%84%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96%E6%96%B9%E6%B3%95%E5%92%8CPython%E4%BB%A3%E7%A0%81%2F</url>
    <content type="text"><![CDATA[5 种使用 Python 代码轻松实现数据可视化的方法数据可视化是数据科学家工作中的重要组成部分。在项目的早期阶段，你通常会进行探索性数据分析（Exploratory Data Analysis，EDA）以获取对数据的一些理解。创建可视化方法确实有助于使事情变得更加清晰易懂，特别是对于大型、高维数据集。在项目结束时，以清晰、简洁和引人注目的方式展现最终结果是非常重要的，因为你的受众往往是非技术型客户，只有这样他们才可以理解。 Matplotlib 是一个流行的 Python 库，可以用来很简单地创建数据可视化方案。但每次创建新项目时，设置数据、参数、图形和排版都会变得非常繁琐和麻烦。在这篇博文中，我们将着眼于 5 个数据可视化方法，并使用 Python Matplotlib 为他们编写一些快速简单的函数。与此同时，这里有一个很棒的图表，可用于在工作中选择正确的可视化方法！ 散点图散点图非常适合展示两个变量之间的关系，因为你可以直接看到数据的原始分布。 如下面第一张图所示的，你还可以通过对组进行简单地颜色编码来查看不同组数据的关系。想要可视化三个变量之间的关系？ 没问题！ 仅需使用另一个参数（如点大小）就可以对第三个变量进行编码，如下面的第二张图所示。 现在开始讨论代码。我们首先用别名 “plt” 导入 Matplotlib 的 pyplot 。要创建一个新的点阵图，我们可调用 plt.subplots() 。我们将 x 轴和 y 轴数据传递给该函数，然后将这些数据传递给 ax.scatter() 以绘制散点图。我们还可以设置点的大小、点颜色和 alpha 透明度。你甚至可以设置 Y 轴为对数刻度。标题和坐标轴上的标签可以专门为该图设置。这是一个易于使用的函数，可用于从头到尾创建散点图！ 12345678910import matplotlib.pyplot as pltimport numpy as npdef scatterplot(x_data, y_data, x_label=&quot;&quot;, y_label=&quot;&quot;, title=&quot;&quot;, color = &quot;r&quot;, yscale_log=False): # Create the plot object _, ax = plt.subplots() # Plot the data, set the size (s), color and transparency (alpha) # of the points ax.scatter(x_data, y_data, s = 10, color = color, alpha = 0.75) if yscale_log == True: ax.set_yscale(&apos;log&apos;) # Label the axes and provide a title ax.set_title(title) ax.set_xlabel(x_label) ax.set_ylabel(y_label) 折线图当你可以看到一个变量随着另一个变量明显变化的时候，比如说它们有一个大的协方差，那最好使用折线图。让我们看一下下面这张图。我们可以清晰地看到对于所有的主线随着时间都有大量的变化。使用散点绘制这些将会极其混乱，难以真正明白和看到发生了什么。折线图对于这种情况则非常好，因为它们基本上提供给我们两个变量（百分比和时间）的协方差的快速总结。另外，我们也可以通过彩色编码进行分组。 这里是折线图的代码。它和上面的散点图很相似，只是在一些变量上有小的变化。 12345678def lineplot(x_data, y_data, x_label=&quot;&quot;, y_label=&quot;&quot;, title=&quot;&quot;): # Create the plot object _, ax = plt.subplots() # Plot the best fit line, set the linewidth (lw), color and # transparency (alpha) of the line ax.plot(x_data, y_data, lw = 2, color = &apos;#539caf&apos;, alpha = 1) # Label the axes and provide a title ax.set_title(title) ax.set_xlabel(x_label) ax.set_ylabel(y_label) 直方图直方图对于查看（或真正地探索）数据点的分布是很有用的。查看下面我们以频率和 IQ 做的直方图。我们可以清楚地看到朝中间聚集，并且能看到中位数是多少。我们也可以看到它呈正态分布。使用直方图真得能清晰地呈现出各个组的频率之间的相对差别。组的使用（离散化）真正地帮助我们看到了“更加宏观的图形”,然而当我们使用所有没有离散组的数据点时，将对可视化可能造成许多干扰，使得看清真正发生了什么变得困难。 下面是在 Matplotlib 中的直方图代码。有两个参数需要注意一下：首先，参数 n_bins 控制我们想要在直方图中有多少个离散的组。更多的组将给我们提供更加完善的信息，但是也许也会引进干扰，使得我们远离全局；另一方面，较少的组给我们一种更多的是“鸟瞰图”和没有更多细节的全局图。其次，参数 cumulative 是一个布尔值，允许我们选择直方图是否为累加的，基本上就是选择是 PDF（Probability Density Function，概率密度函数）还是 CDF（Cumulative Density Function，累积密度函数）。 123456def histogram(data, n_bins, cumulative=False, x_label = &quot;&quot;, y_label = &quot;&quot;, title = &quot;&quot;): _, ax = plt.subplots() ax.hist(data, n_bins = n_bins, cumulative = cumulative, color = &apos;#539caf&apos;) ax.set_ylabel(y_label) ax.set_xlabel(x_label) ax.set_title(title) 想象一下我们想要比较数据中两个变量的分布。有人可能会想你必须制作两张直方图，并且把它们并排放在一起进行比较。然而，实际上有一种更好的办法：我们可以使用不同的透明度对直方图进行叠加覆盖。看下图，均匀分布的透明度设置为 0.5 ，使得我们可以看到他背后的图形。这样我们就可以直接在同一张图表里看到两个分布。 对于重叠的直方图，需要设置一些东西。首先，我们设置可同时容纳不同分布的横轴范围。根据这个范围和期望的组数，我们可以真正地计算出每个组的宽度。最后，我们在同一张图上绘制两个直方图，其中有一个稍微更透明一些。 1234567891011121314# Overlay 2 histograms to compare themdef overlaid_histogram(data1, data2, n_bins = 0, data1_name=&quot;&quot;, data1_color=&quot;#539caf&quot;, data2_name=&quot;&quot;, data2_color=&quot;#7663b0&quot;, x_label=&quot;&quot;, y_label=&quot;&quot;, title=&quot;&quot;): # Set the bounds for the bins so that the two distributions are fairly compared max_nbins = 10 data_range = [min(min(data1), min(data2)), max(max(data1), max(data2))] binwidth = (data_range[1] - data_range[0]) / max_nbins if n_bins == 0 bins = np.arange(data_range[0], data_range[1] + binwidth, binwidth) else: bins = n_bins # Create the plot _, ax = plt.subplots() ax.hist(data1, bins = bins, color = data1_color, alpha = 1, label = data1_name) ax.hist(data2, bins = bins, color = data2_color, alpha = 0.75, label = data2_name) ax.set_ylabel(y_label) ax.set_xlabel(x_label) ax.set_title(title) ax.legend(loc = &apos;best&apos;) 柱状图当你试图将类别很少（可能小于10）的分类数据可视化的时候，柱状图是最有效的。如果我们有太多的分类，那么这些柱状图就会非常杂乱，很难理解。柱状图对分类数据很好，因为你可以很容易地看到基于柱的类别之间的区别（比如大小)；分类也很容易划分和用颜色进行编码。我们将会看到三种不同类型的柱状图：常规的，分组的，堆叠的。在我们进行的过程中，请查看图形下面的代码。 常规的柱状图如下面的图1。在 barplot() 函数中，xdata 表示 x 轴上的标记，ydata 表示 y 轴上的杆高度。误差条是一条以每条柱为中心的额外的线，可以画出标准偏差。 分组的柱状图让我们可以比较多个分类变量。看看下面的图2。我们比较的第一个变量是不同组的分数是如何变化的（组是G1，G2，……等等)。我们也在比较性别本身和颜色代码。看一下代码，y_data_list 变量实际上是一个 y 元素为列表的列表，其中每个子列表代表一个不同的组。然后我们对每个组进行循环，对于每一个组，我们在 x 轴上画出每一个标记；每个组都用彩色进行编码。 堆叠柱状图可以很好地观察不同变量的分类。在图3的堆叠柱状图中，我们比较了每天的服务器负载。通过颜色编码后的堆栈图，我们可以很容易地看到和理解哪些服务器每天工作最多，以及与其他服务器进行比较负载情况如何。此代码的代码与分组的条形图相同。我们循环遍历每一组，但这次我们把新柱放在旧柱上，而不是放在它们的旁边。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748def barplot(x_data, y_data, error_data, x_label=&quot;&quot;, y_label=&quot;&quot;, title=&quot;&quot;): _, ax = plt.subplots() # Draw bars, position them in the center of the tick mark on the x-axis ax.bar(x_data, y_data, color = &apos;#539caf&apos;, align = &apos;center&apos;) # Draw error bars to show standard deviation, set ls to &apos;none&apos; # to remove line between points ax.errorbar(x_data, y_data, yerr = error_data, color = &apos;#297083&apos;, ls = &apos;none&apos;, lw = 2, capthick = 2) ax.set_ylabel(y_label) ax.set_xlabel(x_label) ax.set_title(title)def stackedbarplot(x_data, y_data_list, colors, y_data_names=&quot;&quot;, x_label=&quot;&quot;, y_label=&quot;&quot;, title=&quot;&quot;): _, ax = plt.subplots() # Draw bars, one category at a time for i in range(0, len(y_data_list)): if i == 0: ax.bar(x_data, y_data_list[i], color = colors[i], align = &apos;center&apos;, label = y_data_names[i]) else: # For each category after the first, the bottom of the # bar will be the top of the last category ax.bar(x_data, y_data_list[i], color = colors[i], bottom = y_data_list[i - 1], align = &apos;center&apos;, label = y_data_names[i]) ax.set_ylabel(y_label) ax.set_xlabel(x_label) ax.set_title(title) ax.legend(loc = &apos;upper right&apos;)def groupedbarplot(x_data, y_data_list, colors, y_data_names=&quot;&quot;, x_label=&quot;&quot;, y_label=&quot;&quot;, title=&quot;&quot;): _, ax = plt.subplots() # Total width for all bars at one x location total_width = 0.8 # Width of each individual bar ind_width = total_width / len(y_data_list) # This centers each cluster of bars about the x tick mark alteration = np.arange(-(total_width/2), total_width/2, ind_width) # Draw bars, one category at a time for i in range(0, len(y_data_list)): # Move the bar to the right on the x-axis so it doesn&apos;t # overlap with previously drawn ones ax.bar(x_data + alteration[i], y_data_list[i], color = colors[i], label = y_data_names[i], width = ind_width) ax.set_ylabel(y_label) ax.set_xlabel(x_label) ax.set_title(title) ax.legend(loc = &apos;upper right&apos;) 箱形图我们之前看了直方图，它很好地可视化了变量的分布。但是如果我们需要更多的信息呢？也许我们想要更清晰的看到标准偏差？也许中值与均值有很大不同，我们有很多离群值？如果有这样的偏移和许多值都集中在一边呢？ 这就是箱形图所适合干的事情了。箱形图给我们提供了上面所有的信息。实线框的底部和顶部总是第一个和第三个四分位（比如 25% 和 75% 的数据），箱体中的横线总是第二个四分位（中位数）。像胡须一样的线(虚线和结尾的条线）从这个箱体伸出，显示数据的范围。 由于每个组/变量的框图都是分别绘制的，所以很容易设置。xdata 是一个组/变量的列表。Matplotlib 库的 boxplot() 函数为 ydata 中的每一列或每一个向量绘制一个箱体。因此，xdata 中的每个值对应于 ydata 中的一个列/向量。我们所要设置的就是箱体的美观。 12345678910111213141516171819202122def boxplot(x_data, y_data, base_color=&quot;#539caf&quot;, median_color=&quot;#297083&quot;, x_label=&quot;&quot;, y_label=&quot;&quot;, title=&quot;&quot;): _, ax = plt.subplots() # Draw boxplots, specifying desired style ax.boxplot(y_data # patch_artist must be True to control box fill , patch_artist = True # Properties of median line , medianprops = &#123;&apos;color&apos;: median_color&#125; # Properties of box , boxprops = &#123;&apos;color&apos;: base_color, &apos;facecolor&apos;: base_color&#125; # Properties of whiskers , whiskerprops = &#123;&apos;color&apos;: base_color&#125; # Properties of whisker caps , capprops = &#123;&apos;color&apos;: base_color&#125;) # By default, the tick label starts at 1 and increments by 1 for # each box drawn. This sets the labels to the ones we want ax.set_xticklabels(x_data) ax.set_ylabel(y_label) ax.set_xlabel(x_label) ax.set_title(title) 结语使用 Matplotlib 有 5 个快速简单的数据可视化方法。将相关事务抽象成函数总是会使你的代码更易于阅读和使用！我希望你喜欢这篇文章，并且学到了一些新的有用的技巧。如果你确实如此，请随时给它点赞。 Cheers！]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>数据可视化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Fiddler大解析！抱歉，抓包抓得好真的可以为所欲为。]]></title>
    <url>%2FCTF%2FFiddler%E5%A4%A7%E8%A7%A3%E6%9E%90%EF%BC%81%E6%8A%B1%E6%AD%89%EF%BC%8C%E6%8A%93%E5%8C%85%E6%8A%93%E5%BE%97%E5%A5%BD%E7%9C%9F%E7%9A%84%E5%8F%AF%E4%BB%A5%E4%B8%BA%E6%89%80%E6%AC%B2%E4%B8%BA%E3%80%82%2F</url>
    <content type="text"><![CDATA[说起抓包，很多人以为就是用个工具，简简单单地抓一下就可以了。昨天在面试一个安卓逆向，直接告诉我【抓包没有技术含量】。在这里，我必须发一个教程，解析一下抓包神器——Fiddler。Fiddler仅仅是一个抓包工具？不好意思，Fiddler用得好，真的可以为所欲为。 Fiddler的作者 Fiddler 的作者是 Eric Lawrence 是个大师级的人物， 目前在微软总部西雅图工作。 他的博客是: http://www.ericlawrence.com/Eric/ 博客中能看到他的简历，以及一些生活照. Fiddler的介绍 Fiddler是强大的抓包工具，它的原理是以web代{过}{滤}理服务器的形式进行工作的，使用的代{过}{滤}理地址是：127.0.0.1，端口默认为8888，我们也可以通过设置进行修改。 代{过}{滤}理就是在客户端和服务器之间设置一道关卡，客户端先将请求数据发送出去后，代{过}{滤}理服务器会将数据包进行拦截，代{过}{滤}理服务器再冒充客户端发送数据到服务器；同理，服务器将响应数据返回，代{过}{滤}理服务器也会将数据拦截，再返回给客户端。 Fiddler可以抓取支持http代{过}{滤}理的任意程序的数据包，如果要抓取https会话，要先安装证书。 这两点，希望大家牢记。接下来，给大家介绍Fiddler超级强大的地方之一——Fiddler Script.论坛有很多Fiddler的使用教程，这里就不多说了。但是，却没有一个人说到最强大的脚本功能！ Fiddler 包含了一个脚本文件可以自动修改Http Request 和Response.这样我们就不需要手动地下”断点”去修改了，实际上它是一个脚本文件CustomRules.js 位于: 下，你也可以在Fiddler 中打开CustomRules.js 文件， 启动Fiddler, 点击菜单Rules-&gt;Customize Rules… Fiddler Script 的官方帮助文档必须认真阅读， 地址是： http://www.fiddler2.com/Fiddler/dev/ScriptSamples.asp 小常识：Fiddler Script 是用JScript.NET语言写的 那么Fiddler Script到底有什么用？我这里来列举一些大家肯定遇到过的问题：场景1：一个付费验证，是否付费会返回一个json。里面有一个时间戳和一个false。如果时间戳和客户端不一致，则为破解失败。那么你一定会这么想，有没有一个功能，可以只替换json里面部分参数，然后返回给客户端，而不是全部写死呢？于是，我们需要使用到script了！代码如下：如一个json是这个内容，baidu.com，返回了一个【name:吾爱破解，付费:false】 通过以上代码，即可每次在baidu返回数据时，自动将付费改为true，从而达到了破解的效果。 场景2：我想要修改request的Body里面的部分参数，每次下完断点，修改完再提交，总会网络超时或者APP超时。这该怎么办？难道只能靠手速？ 场景3：我想要修改cookie，改成一个付费过的cookie，但是需要实时生成，不能靠手速。这该怎么办？ 场景4：我想要知道他到底有没有请求具体哪个网址，用查找速度太慢了。过滤也很慢。 场景5：我想要自动保存某个接口的数据到本地，怎么才能实现？ ———————————————————————以上就是Fiddler script经常使用到的功能，免费奉献给大家。直接复制即可使用。 Fiddler的脚本介绍到这里，那么，说到底Fiddler还是只能抓包啊，即使基于xpoesd能抓到https的包，还是发现有很多包抓不到啊！！！等等，本文还没完呢！ （接下来的内容，公布过后，会涉及到技术滥用，因此，仅公布原理。） 首先来讲https，也就是安卓APP证书这一款，目前论坛上已经有不少的朋友发了相关的一些程序，大家可以去下载。如：https://www.52pojie.cn/thread-854170-1-1.html 但是，我个人比较倾向于just trust me这个插件，这是最全能的。just trust me是hook了安卓框架验证机制，更加棒~————————————————————首先，大家抓包会遇到一个问题，为什么即使绕过了APP证书验证，为什么还是抓不到包！难道不是http协议？ 其实并不是，APP大多数还是走的http协议，那为什么抓不到优酷的视频？抓不到关键的访问——原因在于此，代{过}{滤}理！ 目前有非常多的APP，都为了防止被抓包，不仅仅是只用了https这么简单。而使用fiddler抓不到包，本质原因在于wifi代{过}{滤}理！很多APP会检测你是否用了wifi代{过}{滤}理，如果设置了，则APP无法正常使用。这样就会从根本上杜绝被抓包 那么，我们要怎么做才能防止这种情况的发生呢？比较笨的一种办法依旧是使用xposed上的just trust me，依旧hook相关函数，即可破解该策略。————————————————————等等，我发现用了trust me过后，还是抓不到包，这到底是怎么回事！！！非常简单，他们就是利用了本地服务器中转，这样的话Fiddler是抓不了包的。比如著名APP：麻花影视、电视家 那么，有没有办法能抓到这种操作的包呢？当然是有的。这边只能透露几点，不能正大光明地公布，否则大量非法分子就可以破解非常多的APP了。 提示：Fiddler的本质其实就是代{过}{滤}理服务器，那么，如果是代{过}{滤}理服务器，所有的请求是不是都会走这台服务器呢？那是肯定的。 ——————————————— 最后，抓包除了破解APP以外，还有什么用？第一：抓接口，可以将所有的视频点播类APP都抓下来！如麻花视频：———————————————————— GET http://api.acgplusplus.com/api/a … &amp;time=1547183436020 HTTP/1.1 Content-Type: application/json Accept: application/json accessToken: 936b8872c4f81b6537eaa80f4e2e78c7807cebbcb02548d8d4da1e55c61c6509 X-Client-NonceStr: FbWu9jFnpG X-Client-IP: 127.0.0.1 X-Client-TimeStamp: 1543592259810 X-Client-Version: 1.1.1 X-Client-Sign: 61274de99728b3981041d657bec4528b416658cd651110f9cf950dd3fbc0b15f X-Auth-Token: mb_token:25361603:1211f5511483be1def9af655c10ede12 X-Client-Token: Host: api.acgplusplus.com Connection: Keep-Alive User-Agent: okhttp/3.10.0 Accept-Encoding: identity ————————————————————这个接口大家可以用用，永不失效的接口！返回出来的地址就是这样。（大家可以直接用，哈哈，本来麻花视频也是盗版的） 再比如优酷的播放接口： GET https://ups.youku.com/ups/get.json?ckey=不公布，免得被盗用User-Agent: Youku;7.5.0;Android;6.0.1;MuMuHost: ups.youku.comConnection: Keep-AliveAccept-Encoding: gzip, deflate 这些接口，全都是永久有效的！ 拥有抓包技术，你就可以自己制作任何的视频APP，调用第三方的接口即可！！！ 另外楼主尝试过支付宝等相关APP，依旧能抓到部分的包。所以——抱歉，抓包抓得好真的可以为所欲为。 原文链接： https://www.52pojie.cn/thread-854434-1-1.html?from=groupmessage&amp;isappinstalled=0 文章作者：狂暴补师亚丝娜 文章来源：吾爱破解]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Fiddler</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018黑客工具]]></title>
    <url>%2FCTF%2F2018%E9%BB%91%E5%AE%A2%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[转载至公众号 “黑客之道” 黑客技术一度被认为是一个神秘的特有领域，在向世界前行的黑客大军中如果装备不行，就无法发挥真正的实力，好的工具可以让工作事半功倍，今天华盟君给大家推荐一些在2018年中优秀的黑客工具，这些工具都很出名，可以百度一波！ 话不多数！先来一波！ NO.1 GodOfHacker NO.2 [嗅探神器] Intercepter NO.3 局域网查看工具 NO.4 EvilFoca NO.5 NetFuke NO.6 LeGend Rat NO.7 NjRAT NO.8 Pker多线程后台极速扫描工具 NO.9 Wscan6 NO.10 Mimikatz NO.11 EagleEye-追踪目标 NO.12 Hijacker v1.5 NO.13 LOIC 1.0.8 (Low Orbit Ion Cannon) NO.14 Trape-开源智能工具 NO.15 BlackEye-功能齐全的网络钓鱼工具 NO.16 Mercury-一种用来收集信息 NO.17 VOOKI-Web应用程序漏洞扫描程序 NO.18 Devploit v3.6-信息收集工具 NO.19 -功能齐全的Twitter智能分析开源工具 NO.20 -Android智能手机渗透测试平台 NO.21 -一种蛮力攻击框架 NO.22 -信息收集工具 NO.23 -渗透测试框架 NO.24 -用于渗透测试的Linux发行版 NO.25 -自动Wireless攻击工具 NO.26 - 一种自动化的Pentest工具 NO.27 -类似Nmap NO.28 -检测网站CMS、网站扫描和自动漏洞利用 NO.29 -爬虫工具 NO.30 -网络钓鱼工具 接下来我们将分成三个部分！ Windows最佳黑客工具！ Linux最佳黑客工具！ 手机最佳黑客工具！ Windows最佳黑客工具 NO.1 ARPwner ARPwner是一个python工具，允许您执行 ARP中毒和DNS中毒攻击。它有一个干净简单的GUI和一个插件系统来过滤收集的信息，还有一个SSLstrip的实现。它由Nicolas Trippar在BlackHat USA 2012上发布。 NO.2 METASPLOIT Metasploit是一款开源的安全漏洞检测工具，可以帮助安全和IT专业人士识别安全性问题，验证漏洞的缓解措施，并管理专家驱动的安全性进行评估，提供真正的安全风险情报。该工具主要面向的是Linux操作系统，但也有Windows和Mac版本。 NO.3 BSQLinjector BSQLinjector是一个用ruby编写的盲SQL注入开发工具。它使用盲注入方法从SQL数据库中检索数据。我建议使用“—test”开关，以便在将配置的有效负载发送到应用程序之前清楚地查看其外观。 NO.4 Detekt Detekt是一个免费的工具，可以检测复杂的监控程序，比如FinFisher a.k.a.FinSpy和Ha.Team RCS。这个工具不能保证检测到所有的间谍软件，所以不要认为这是反病毒/反间谍软件的替代品。 NO.5 WIRESHARK Wireshark(前称Ethereal)是一个网络封包分析软件。网络封包分析软件的功能是撷取网络封包，并尽可能显示出最为详细的网络封包资料。Wireshark适用于Linux和Windows操作系统。 NO.6 AirCrack Aircrack是一套用于破解WEP和WPA的工具套装，一般用于无线网络的密钥破解，从而非法进入未经许可的无线网络。该工具功能强大，在世界范围内使用最为广泛。 NO.7 Cain and Abel Cain &amp; Abel 是由Oxid.it开发的一个针对Microsoft操作系统的免费口令恢复工具。号称穷人使用的L0phtcrack。它的功能十分强大，可以网络嗅探，网络欺骗，破解加密口令、解码被打乱的口令、显示口令框、显示缓存口令和分析路由协议，甚至还可以监听内网中他人使用VOIP拨打电话。 NO.8 Fern WiFi Cracker Fern Wifi Cracker是一种无线安全审计和攻击软件编写的程序，使用Python编程语言和Python的Qt图形界面库，该程序是能够破解和恢复WEP / WPA / WPS键和无线或以太网上运行其他基于网络的攻击基于网络的，对于WEP破解，它使用分段，Chop-Chop，Caffe-Latte，Hirte，ARP请求重播或WPS攻击。 NO.9 Infernal-Twin ​ Infernal-Twin是一个自动化的渗透测试工具，开发目的是通过自动化的Evil Twin攻击来评估无线的安全性。 NO.10 Reaver Reaver：掠夺者，免费的开源WiFi密码查找软件，可以破解大部分当前路由器的密码。Reaver通过对WPS PIN的暴力攻击来获取WPA / WPA2密码，它可以在4-10小时内获得明文密码，不过一般在实际操作中会快的多。 Linux最佳黑客工具 NO.1 Social-Engineer Toolkit Social-Engineer Toolkit（社会工程师工具包）是一款基于Python的社交工程渗透测试高级框架。它提供了制作多种类型社会工程攻击的组件，如凭据获取、鱼叉式网络钓鱼攻击、短信欺骗、网络钓鱼电子邮件等等。目前，Social-Engineer Toolkit仅适用于Linux系统。 NO.2 Hashcat Hashcat是一个高级密码破解程序，支持五种独特的攻击模式：Straight，Combination，Brute-force，Hybrid dictionary mask和Hybrid mask dictionary。 它目前支持Linux，Windows和OSX上的CPU，GPU和其他硬件加速器，并且具有帮助实现分布式密码破解的功能。 NO.3 Lynis Lynis是一种轻量级的开源安全审计工具。系统管理员，安全专业人员和审计员使用它来评估其基于Linux和UNIX的系统的安全防御。它在主机上运行，??因此它执行比漏洞扫描程序更广泛的安全扫描。 NO.4 Nmap Nmap是一个网络连接端扫描软件，用来扫描网上电脑开放的网络连接端。确定哪些服务运行在哪些连接端，并且推断计算机运行哪个操作系统(这是亦称 fingerprinting)。它是网络管理员必用的软件之一，以及用以评估网络系统安全。Nmap适用于Linux、Windows和Mac。 NO.5 Burp Suite Burp Suite 是用于攻击web 应用程序的集成平台，包含了许多工具。Burp Suite为这些工具设计了许多接口，以加快攻击应用程序的过程。所有工具都共享一个请求，并能处理对应的HTTP 消息、持久性、认证、代理、日志、警报。 NO.6 Netcat Netcat是一个简单而通用的Unix实用工具，它使用TCP或UDP协议在网络连接之间读取和写入数据。它被设计成一个可靠的“后端”工具，可以被其他程序和脚本直接或容易地使用。同时，它是一个功能丰富的网络调试和探索工具，因为它可以创建几乎任何类型的连接，您将需要，并有几个有趣的内置功能。 NO.7 Dsniff Dsniff足一个高级的口令嗅探器，Dug Song写的Dsniff的工具是第一批扩展了传统的Sniffer概念的监听工具。Dsniff将制造的数据包注入到网络，并将通信数据重新定句到攻击者的机器。 NO.8 OclHashcat oclHashcat自称是世界上第一个也是唯一一个基于GPGPU的引擎的世界上最快的密码破解工具。为了使用该工具，NVIDIA用户需要ForceWare 346.59或更高版本，AMD用户需要Catalyst 15.7或更高版本。 NO.9 THC Hydra THC Hydra是一个非常受欢迎的密码破解工具，并且有一个非常活跃和经验丰富的开发团队在维护，支持Windows，Linux，Free BSD，Solaris和OS X等操作系统。THC Hydra是一个快速稳定的网络登录攻击工具，它将使用字典或暴力攻击来尝试针对登录页面的各种密码和登录组合。 NO.10 NESSUS Nessus 是目前全世界最多人使用的系统漏洞扫描与分析软件。总共有超过75,000个机构使用Nessus 作为扫描该机构电脑系统的软件。 CERT 与 SANS 等著名的网络安全相关机构皆认同此工具软件的功能与可用性。 手机最佳黑客工具 NO.1 Hash Decrypt Hash Decrypt是一个Android应用程序，可以让你破解/解密哈希。这个应用程序使用字典攻击来破解哈希。它支持10种不同的散列函数，如MD2，MD4，MD5，SHA1，SHA-256，SHA-384，SHA-512，Tiger，RIPEMD-128和RIPEMD-160。 NO.2 Hackode Hackode是一款由Ravi Kumar为渗透测试人员，道德黑客，IT管理员和网络安全专业人士开发的Android应用程序。您可以使用此应用收集有关目标的信息并查找易受攻击的网站。这个应用程序是一个安全意识的Android用户的武器库的一个伟大的补充。 NO.3 Fing Fing是一个用于网络分析的简单android工具。它可以帮助您，发现连接到WiFi网络的设备，从移动设备/平板电脑打开设备，执行traceroute和一些网络操作。 NO.4 Shark For Root Shark For Root是安全专家和黑客的诈骗版Android版本。它基本上是一个交通嗅探器，适用于WiFi，3G和FroYo系留模式。该应用程序基于tcpdump，因此您可以在此Android版本上使用tcpdump命令。 NO.5 Android 网络欺骗是一个android应用程序，允许您拦截和修改WiFi网络流量。这是一个简单的工具，可以用来执行多个欺骗，如改变文本，自定义图像变化，自定义重定向，中间人等。 NO.6 DroidSheep DroidSheep是由Andreas Koch开发的 用于无线网络安全分析的安卓工具。它基本上是一个会话劫持工具，允许黑客通过无线网络捕获会话cookie。这意味着您可以嗅探并捕获位于同一网络上的人员的Web会话配置文件。 NO.7 DroidSheep Nipper是一款用于检查CMS（内容管理系统）网站安全性的Android应用程序。它是一个简单的扫描仪，有超过15个不同的模块来收集有关特定URL的信息。 NO.8 ZANTI ZANTI是由Zimperium Mobile Security为网络安全专业人员开发的渗透测试工具包。基本上，它允许您模拟网络上的恶意攻击。在zANTI的帮助下，您将能够执行各种类型的操作，如MITM攻击，MAC地址欺骗，扫描，密码审计，漏洞检查等等。简而言之，这个android工具包是黑客的完美伴侣。 NO.9 AnDOSid AnDOSid是由Scott Herbert开发的一款安卓工具，可用于从手机发起DoS攻击，AnDOSid非常强大，您甚至可以使用它来关闭Web服务器。但是不要去做，因为这是进入监狱的快捷方式之一！ NO.10 WiFi Kill Pro WiFi Kill Pro是一款android工具，你可以用它来禁用同一WiFi网络上设备的互联网连接。它是一个具有简单用户界面的轻量级工具。也就是说，任何人都可以在没有任何用户指南的情况下使用这个应用程序。]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTML+CSS入门学习]]></title>
    <url>%2F%E5%89%8D%E7%AB%AF%2FHTML-CSS%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[一、HTML5介绍网页声明!DOCTYPE html 网页标题title 设置字符编码集格式meta charset 网页头部head 二、文本标记行内元素用来做细微的调整，可以和其他行内元素共存一行 b 加粗 i 倾斜 u 下划线 s 删除线 sup 上标 sub 下标 span 三、HTML5与CSS3之间的关系 CSS 样式表 CSS语法规范 选择器{样式规则} 样式规则-属性名：属性值 元素选择器-使用元素的名称作为选择器的名称 四、常用CSS属性与属性值 字体颜色 color：合法颜色值； 背景颜色 background-color：合法颜色值； 文本排列 text-align:left/center/right; 文本修饰 text-decoration:none/underline; 文本尺寸 font-size: n px; 宽度 width: n px; 高度 height: n px; 五、其它标记块级元素用来做布局，独占一行，元素前后都会换行 标题元素 hn n - 1~6 特点： 独占一行（独占一行的基本都能使用文本排列样式） 文本加粗 字体大小依次减小 每行文本上下都有一定的距离 段落元素p 独占一行，不嵌套，不放独占一行的元素 可以使用文本排列 只要是纯文本，就使用P 块级元素与行内元素： 块级元素：默认情况下，独占一行 div、hn、p 行内元素：可以和其他行内元素在一行内显示 span、b、i、u等 换行br 分割线hr 预格式化pre 实体字符 | | || —— | —— || | | 图像格式 JPEG 采用有损压缩算法，压缩比较大 GIF 使用256色的方法来压缩图像，色彩会有较大的失真，主要用于线条为主的图像，或图像面幅很小时。另外GIF支持动画和透明图像 PNG 采用无损压缩，有8位、24位、32位三种形式，支持透明色（PNG24位不支持），但不支持动画 六、图像元素 src设置图片路径 src引用图片的路径 width height 当图片只设置了宽度或高度，另外一个属性会跟着等比缩放 css圆角图片 border-radius : n px/n% 之间的区别 123相对路径是从引用的网页文件本身开始构建的，如果在A网站中的a-test.html中要插入图片a-next.jpg，可以这样做:&lt;img src=&quot;../img/a-next.jpg&quot; /&gt;，重点是img前面的../，表示从html处于的include开始起步，输入一个../表示回到上面一级父文件夹下，然后再接着img/表示又从父级文件夹下的img文件开始了，最后定位img下面的next.jpg。根路径是从网站的最底层开始起，一般的网站的根目录就是域名下对应的文件夹，就如D盘是一个网站，双击D盘进入到D盘看到的就是网站的根目录，这种路径的链接样式是这样的：如果在A网站中的a-test.html中要插入图片a-next.jpg，可以这样做:&lt;img src=&quot;/img/a-next.jpg&quot; &gt;，以/开头表示从网站根目录算起，找到根目录下面的img文件夹下的next.jpg。绝对路径就很好理解了，这种路径一般带有网站的域名，如果在A网站中的a-test.html中要插入图片a-next.jpg，需要这样这样写:&lt;img src=&quot;http://www.a.com/img/a-next.jpg&quot; &gt;，将图片路径上带有了域名信息，再打个比方：如果在A网站中的a-test.html中要插入B网站的图片b-next.jpg，就需要这样写：&lt;img src=&quot;http://www.b.com/img/b-next.jpg&quot; &gt;，这种方法适用与在不同网站之间插入外部网站的图片。 伪类锚伪类：规定链接不同状态的显示方式 七、链接 语法 a 必须的属性 href - 跳转的URL路径/地址 可选的属性 target _blank 在新页面中打开 CSS样式 伪类选择器：给元素添加一些特殊效果 link：当链接没有被访问过的样式 visited：当链接已经被访问过的样式 hover当鼠标移动到链接上时的样式 active：当链接被选中时的样式 锚点 创建锚点 &lt;div id=&quot;锚点名称&quot;&gt;内容&lt;/div&gt; 链接到锚点 &lt;a href=&quot;#锚点名称&quot;&gt;&lt;/a&gt; 跳转到其他页面中的锚点 &lt;a href=&quot;页面路径#锚点名称&quot;&gt;&lt;/a&gt; 八、浮动概述 浮动定位是指将元素排除在普通流之外，即元素将脱离标准文档流（不占据页面空间） 浮动回见浮动元素放置在包含框的左边和右边 浮动元素依旧位于包含框之内 浮动的框可以向左或向右移动，直到它的外边缘碰到包含框或另一个浮动框的边框为止 经常使用它来解决块级元素在一行内显示的问题 九、列表 定义 - 将一些具有相同或者相似特征的元素进行整齐的排列 分类 有序列表 ol &amp;无序列表 ul 列表项 li 属性 type - 控制列表项表示的样式 ol的属性 start - 控制有序列表项标识的开始位置 CSS样式 list-style-type:none; 去掉列表项标识 十、尺寸 常用尺寸单位 px - 像素 % - 百分比 常用的颜色单位 rgb(0,0,255); 0~255之间的数字 rrggbb; 6位的16进制数字 英文单词 尺寸 width - 宽度 height - 高度 哪些元素能够设置尺寸属性 所有的块级元素都能设置尺寸属性 能够设置宽度和高度的html元素：img 等 大部分的行内元素都不能设置尺寸属性 十一、浮动 语法 float 取值 none/left/right 概述 浮动的元素会脱离文档流，不占据页面空间 浮动户籍将浮动的元素放置在包含框的左边或右边 浮动的元素依然会位于父元素之内 如果浮动的元素之前已经有了一个已经浮动的元素，那么该浮动元素会统考在前一个已经浮动元素的旁边 浮动专门用于解决块级元素在一行显示的问题 清楚浮动 语法：属性 clear 取值 none/left/right/both; 常用语法 clear:both; 清楚两侧浮动 浮动对父元素造成的影响 - 父元素没有高度 解决办法 ​ ​ 直接给父元素设置高度 让父元素也浮动 追加空元素，并使用clear:both; 清除浮动的影响 overflow：hidden；溢出隐藏，清除浮动 十二、CSS3基础选择器 通用选择器 - 选择页面中所有的元素 1234*&#123; margin:0; padding:0;&#125; 元素选择器 - 以标签的名称作为选择器 - 选中页面中所有该元素标签名称{样式规则} ID选择器 - 选择页面中ID为 xx 的元素 在元素的开始标签中 定义ID属性并设置对应的ID值 ID名称{样式规则} 类选择器 - 选择页面中clss为 xx的元素 在元素的开始标签中 定义clss属性并设置对应的class值 .class名称{样式规则} 多类选择器 - 让一个元素同时使用多个定义好的样式 &lt;div class=&quot;a1 a2 z3&quot;&gt;&lt;/div&gt; 分类选择器 - 对页面中的元素做细分控制 div.a1 - 选择页面中class为a1的div元素 群组选择器 - 让页面中的多个元素同时使用相同的样式 选择器1，选择器2，选择器3，……，选择器n{样式规则} 后代选择器 选择器1 选择器2{样式规则} 选择器1 必须是 选择器2 的祖先元素 子代选择器 选择器1&gt;选择器2{样式规则} 选择器1 必须是 选择器2 的父元素 十三、绝对定位的特点 将元素的内容从普通流中完全溢出，不占据空间（脱离文档流） 使用偏移属性来固定该元素的位置 相对于最近的已定位祖先元素 如果元素没有已定位的祖先元素，那么它的位置相对于最初的包含块，比如body元素 绝对定位一般用于实现页面下拉选项框 十四、定义列表 语法 定义 - dl 定义术语 - dt 定义内容 - dd 1234&lt;dl&gt; &lt;dt&gt;&lt;/dt&gt; &lt;dd&gt;&lt;/dd&gt; - 多个dd&lt;/dl&gt; 使用场合 图文混排 十五、定位 - 控制元素的位置 相对定位 position:relative; 不脱离文档流 一般用于网页元素位置的微调 经常配合绝对定位使用 配合偏移属性使用 绝对定位 position:absolute; 脱离文档流 相对与已经定位的祖先元素进行定位 如果没有已经定位的祖先元素，那么它会相对于最初的包含框（body）进行定位 配合偏移属性使用 下拉菜单/图文混排 固定定位 position:fixed; 脱离文档流 相对于最初的包含框定位 固定定位的元素不会随着滚动条的滚动而滚动 经常用于返回顶部功能的实现 偏移属性 top/right/bottom/left 当偏移属性取值为正，元素移动方向为属性相反方向 当偏移属性取值为负，元素移动方向为属性相同方向 十六、边框 语法 border： 边框宽度 边框样式 边框颜色 实线solid 单边定义 border-方向：边框宽度 边框样式 边框颜色 常用用法 border：1px solid #000； 特殊取值 - 透明 transparent 边框倒角：border-radius：px/% 十七、框模型 外边距 margin 定义： 元素周围的空白区域 取值： margin只有一个取值时，代表上下左右四个方向； margin：值1 值2 值1 - 上下的外边距 值2 - 左右的外边距 margin：值1 值2 值3； 值1 - 上外编剧 值2 - 左右外边距 值3 - 下外边距 margin： 值1 值2 值3 值4 上下左右四个方向 单边定义： margin - 方向： n px; 方向 top/right/bottom/top auto 居中 只能控制块级元素左右居中 内边距 padding 同margin 特殊用法 元素所占大小计算方式 元素实际所占宽度 = 元素内容宽度+左右内边距+左右边框+左右外边距 元素实际所占高度 = 元素内容高度+上下内边距+上下边框+上下外边距 box-sizing:border-box; 让元素大小包含元素内容，内边距以及边框的大小 改变盒模型计算的方式 十八、过渡 语法：transition：过渡属性 过渡时间 过渡速度函数 过渡延迟； 属性 - 带有数字形式的属性值一半都可过渡 时间 - 按照程序需要的时间设置即可 速度函数 - 一般使用linear（匀速）或者不写 延迟 - 一般不设置 常用用法：transition：all 0.3 s linear； 十九、转换 平移 transform：translate（x方向平移，y方向平移）； 单方向平移 translateX、translateY（平移量）； 注意：y的正方向向下 缩放 transform：scale（默认值1）； 当取值为0~1时，缩小 当取值&gt;1时，放大 旋转 transform：rotate（n deg）； 当取值为正时，顺时针旋转 当取值为负时，逆时针旋转 倾斜 transform：skew（n deg，n deg）； 联合使用 注意：一个元素中不允许出现多个transform属性 transform：translate（） scale（） rotate（） skew（）； 二十、动画 声明动画 @keyframes 动画名称{ 0%{动画开始时的样式} 50%{动画运行到一半时的样式} 100%{动画结束时的样式} } 调用动画 animation： 动画名称 动画时间 动画速度函数 动画延迟 动画播放次数； 无限次循环播放：infinite 速度函数 - 匀速的：linear 二十一、背景属性 背景颜色 background-color: 合法颜色值； 背景图像 background-image:url(“图像资源的路径”)； 注：背景颜色和背景图像同时设置时，背景图像会压在背景颜色的上边 背景重复 background-repeat: none/repeat-x/repeat-y/no-repeat; 背景尺寸 background-size: 宽度 高度；- px/% 背景图像定位 background-position: x方向偏移量 y方向偏移量； x取值为正 - 向右偏移 x取值为负 - 向左偏移 y取值为正 - 向下偏移 y取值为负 - 向上偏移 配合精灵图（图像拼合技术）使用 二十二、表单form 表单控件 input 属性 type - 值不同，效果也不同 取值 text - 文本框 password 密码框 radio 单选框 - name值需要是一样的 checkbox 复选框 submit 提交按钮 reset 重置按钮 button 普通按钮]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test_psd]]></title>
    <url>%2Funcategorized%2Ftest-psd%2F</url>
    <content type="text"><![CDATA[password: 123456]]></content>
  </entry>
  <entry>
    <title><![CDATA[CSS(counter)计数器(content目录序号自动递增)详解]]></title>
    <url>%2F%E5%89%8D%E7%AB%AF%2FCSS-counter-%E8%AE%A1%E6%95%B0%E5%99%A8%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[CSS counter计数器(content目录序号自动递增)详解一、挖坟不可耻CSS计数器不是什么新鲜玩意了，早在10年春暖花开的时候，我写的“CSS content内容生成技术以及应用”一文就要提到（见下图），不过当时是作为其中一员介绍。就像例行的溜新同事一样，虽然黑如焦炭的我在自我介绍的时候给新同事留下了深刻印象，但由于介绍的同事茫茫多，我只是其中一员。很自然，个把月之后，我就会被无情的淡忘，除了那依稀的面庞，因为毕竟长得还算比较抽象。 然而，CSS计数器的斗量显然不是短短几句介绍能够显露的，所谓人不可貌相。就像我，说不定某年某月，当年像驴子一样被溜的新同事终于脑袋被门夹了，想起了我的音容笑貌，找我来寻求帮助呢！ 我最近就遇到这样的情况。 给部门同事做点果汁系统的时候，由于果汁店经常会有水果因果品爆发被N多靓妹相中而缺货，因此，每人可以选择三种自由搭配的饮品。于是，就有了第1选择、第2选择、第3选择…… 本来我是纯文字写在标签里的。好重好累，感觉不会再爱了！此时，突然眼前一道白光，午休时间结束，阿姨把办公室的灯打开了。这恍如隔世的念闪让我突然想起了当年大明湖畔的“CSS计数器”。想当年，移动web还是草莽，IE六七兴风作浪。这诱人的技能就算昭告于世也是受制于兼容大环境而腰斩的命。 但是现在不一样了，我们赶上了一个更好的时代：英语老师从事传统工业生产锤子，影视明星舍身取义集体赴监狱拍摄大片；以前那些受制于IE6/IE7不兼容而不见天日的高级CSS/JS特性也纷纷走到了台前，CSS计数器就是其中一员。于是，我拿起我平时钓鱼挖蚯蚓的小锹去挖CSS计数器的坟。虽然目前网上已有一些介绍CSS计数器的文章，但大多不够全面，案例不够精彩，查阅也不方便。就像是租的房子，虽然也能挡风遮雨，但装修风格不是自己的，还寄人篱下，保不准房东借个东风就把我吹走了。所以啊，有必要自己留一手，去挖个坟然后建个房。 对于纯洁的技术圈而言，挖坟并不可耻。我们重新去挖掘过去的那些文章知识，好像一个考古学家去挖掘尘封的历史、消失的文明一般，是件很有价值的事情。所以，如果大家对挖掘考古感兴趣，就跟我一起去挖挖挖~~ 二、CSS计数器三角关系挖挖挖CSS计数器只能跟content属性在一起的时候才有作用，而content属性貌似专门用在before/after伪元素上的。于是，就有了，“计数器↔伪元素↔content属性”的铁三角关系。 三、CSS计数器成员挖挖挖CSS计数就跟我们军训报数一样的！现在，让我们的静静地闭上眼睛，让思绪飞到青葱的大学，那个炎热的夏日，那个宽广的军训场地，你…想到了什么？——“隔壁班的那个妹子长得好水灵好可爱我好喜欢”。囧，还有呢？——“露着大腿的漂亮师姐从面前悠然走过，留下一阵芬芳，掳走我的心房”。…… 成心找抽啊！就算色心满满，脑袋插满刀子，也应该想到，帅气的教官有木有！共苦的基友有木有！嘹亮的口号有木有！犀利的报数有木有！ 说到报数，是否想起了教官的嘹亮口号：“生信4班，立正，稍息，开始1,2,3,4报数！” 其中有这么几个关键点：1. 班级命名。总不能六脉神剑一指，你，侬，汝来称呼吧~有个称呼，如生信4班，就知道谁的是谁了。2. 报数规则。1,2,3,4递增报数，还是1,2,1,2报数，让班级的人知道。3. 开始报数。不发口令，大眼瞪小眼，会乱了秩序。 巧的是，以上3个关键点正好对应CSS计数器的2个属性和1个方法，依次是：1. counter-reset2. counter-increment3. counter()/counters() 依次说来。1. counter-reset顾名思意，就是“计数器-重置”的意思。其实就是“班级命名”，主要作用就是给计数器起个名字。如果可能，顺便告诉下从哪个数字开始计数。默认是0, 注意，默认是0而不是1. 可能有同学回疑惑，尼玛网上的各种例子默认显示的第1个数字不都是1吗？那是因为受了counter-increment普照的影响，后面会详细讲解。 OK, 这里，我们先看两个简单的counter-reset的例子： 12.xxx &#123; counter-reset: small-apple; &#125; /* 计数器名称是&apos;small-apple&apos; */.xxx &#123; counter-reset: small-apple 2; &#125; /* 计数器名称是&apos;small-apple&apos;, 并且默认起始值是2 */ 闻名不如见面，您可以狠狠地点击这里：counter-reset值为2简单demo counter-reset的计数重置可以是负数，例如-2。也可以写成小数，例如2.99，不过就是IE和FireFox都不识别，认为是不合法数值，直接无视，当作默认值0来处理；不过Chrome不嫌贫嫉富，任何小数都是向下取整，如2.99当成2处理，于是王小二还是那个王小二。 到此为止？非也非也！counter-reset还有一手，就是多个计数器同时命名。例如，王小二和王小三同时登台： 1.xxx &#123; counter-reset: wangxiaoer 2 wangxiaosan 3; &#125; 直接空格分隔，譬如逗号什么的都不行。 闻名不如见面，您可以狠狠地点击这里：两个技术名称并存demo 另外，counter-reset还可以设置为none和inherit. 干掉重置以及继承重置。你懂的，就不展开了。 2. counter-increment顾名思意，就是“计数器-递增”的意思。值为counter-reset的1个或多个关键字。后面可以跟随数字，表示每次计数的变化值。如果缺省，则使用默认变化值1（方便起见，下面的都使用默认值做说明）。 CSS的计数器的计数是有一套规则的，我将之形象地称为“普照规则”。具体来讲就是：普照源(counter-reset)唯一，每普照(counter-increment)1次，普照源增加1次计数值。 于是，我们可以解释上面提到的“默认值是0”的问题。通常CSS计数器应用的时候，我们都会使用counter-increment, 肯定要用这个，否则怎么递增呢！而且一般都是1次普照，正好+1，第一个计数的值就是1啦(0+1=1)！ 下面，通过几个例子，给大家形象地展示下普照规则。 ① 您可以狠狠地点击这里：王小二counter-increment普照成王小三demo demo中，王小二的counter-reset值是wangxiaoer 2，但是，显示的计数不是小2而是小3，王小二变成了王小三！ Demo相关核心代码为： 123.counter &#123; counter-reset: wangxiaoer 2; counter-increment: wangxiaoer; &#125;.counter:before &#123; content: counter(wangxiaoer); &#125;&lt;p class=&quot;counter&quot;&gt;&lt;/p&gt; 这里counter-increment普照了p标签，counter-reset值增加，默认递增1，于是计数从设置的初始值2变成了3，wangxiaoer就是这里的计数器，自然伪元素content值counter(wangxiaoer)就是3. ② 当然，也可以普照自身，也就是counter-increment直接设置在伪元素上： 123.counter &#123; counter-reset: wangxiaoer 2; &#125;.counter:before &#123; content: counter(wangxiaoer); counter-increment: wangxiaoer; &#125;&lt;p class=&quot;counter&quot;&gt;&lt;/p&gt; 依然是1次普照，依旧全局的计数器+1，所以，显示的数值还是3(demo略). ③ 趁热打铁。如果父元素和子元素都被counter-increment普照1遍，结果会如何呢？ 很简单的，父元素1次普照，子元素1次普照，共两次普照，counter-reset设置的计数器值增加2次，计数起始值是2，于是现实的数字就是4啦！ 您可以狠狠地点击这里：counter-increment父子连续普照demo Demo相关核心代码为： 123.counter &#123; counter-reset: wangxiaoer 2; counter-increment: wangxiaoer; &#125;.counter:before &#123; content: counter(wangxiaoer); counter-increment: wangxiaoer; &#125;&lt;p class=&quot;counter&quot;&gt;&lt;/p&gt; // 显示的是4 总而言之，无论位置在何方，只要有counter-increment，对应的计数器的值就会变化，counter()只是输出而已！ ④ 理解了“普照规则”，则以我们通常的计数器递增效果也可以理解了。 考虑下面这两个问题： 爸爸受到普照，且重置默认值0，爸爸有2个孩子。孩子自身都没有普照。两个孩子的计数值是？ 爸爸没有普照，重置默认值0，爸爸有2个孩子。孩子自身都接受普照。两个孩子的计数值是？ 答案是：1,1和1,2! 哦？答案居然不一样，有什么差别呢？ 很简单。什么爸爸，孩子你都不要关心。只要看被普照了几次。情况1就爸爸被普照，因此，计数器增加1次，此时两个孩子的counter自然都是1; 情况2，两个孩子被普照，普照2次，第1个孩子普照之时，计数器+1，也就是1；第2个孩子普照之时再+1，于是就是2. 于是，两个孩子的counter输出就是1,2. 您可以狠狠地点击这里：兄弟递增规则演示demo 上demo对应上面的第2个问题，其结果截图如下： 核心代码如下： 1234.counter &#123; counter-reset: wangxiaoer 2; &#125;.counter:before,.counter:after &#123; content: counter(wangxiaoer); counter-increment: wangxiaoer; &#125;&lt;p class=&quot;counter&quot;&gt;&lt;/p&gt; 计数器的数值变化遵循HTML渲染顺序，遇到一个increment计数器就变化，什么时候counter输出就输出此时的计数值。看懂了下图，您自然就会全然明白“普照规则”了。 如果上图看不明白，您可以狠狠地点击这里查看HTML与CSS源代码，感受下increment即递增的“普照规则”。 counter-increment其他设定① counter-reset可以一次命名两个计数器名称，counter-increment自然有与之呼应的设定，也是名称留空就可以了。 您可以狠狠地点击这里：counter-increment多名称同时应用demo ② 正如本节开始提到的，这变化的值不一定是1，我们可以灵活设置。例如： 1counter-increment: counter 2 那就是偶数偶数的增加。例如下面这个变身: 还可以是负数，例如： 1counter-increment: counter -1 就有了递减排序效果啦！ ③ 值还可以是none或者inherit. 3. counter()/counters()这是个方法，不是属性。类似CSS3中才calc()计算。这里作用很单纯显示计数。不过名称、用法有多个： ① 目前为止，我们看到的是最简单的用法： 1counter(name) /* name就是counter-reset的名称 */ ② 那下面这个语法是什么意思呢？ 1counter(name, style) 这里的style参数还有有些名堂的。其支持的关键字值就是list-style-type支持的那些值。作用是，我们递增递减可以不一定是数字，还可以是英文字母，或者罗马文等。 list-style-type：disc | circle | square | decimal | lower-roman | upper-roman | lower-alpha | upper-alpha | none | armenian | cjk-ideographic | georgian | lower-greek | hebrew | hiragana | hiragana-iroha | katakana | katakana-iroha | lower-latin | upper-latin 闻名不如见面。您可以狠狠地点击这里：CSS计数器counter()方法style参数demo 结果见下截图： 核心CSS代码为： 1content: counter(wangxiaoer, lower-roman); /* 以小写罗马数字格式表示当前计数器wangxiaoer的值 */ ③ counter还支持级联。也就是一个content属性值可以有多个counter()方法。 闻名不如见面。您可以狠狠地点击这里：多个counter级联并存demo 核心CSS/HTML如下： 123.counter &#123; counter-reset: wangxiaoer 2 wangxiaosan 3; &#125;.counter:before &#123; content: counter(wangxiaoer) &apos;\A&apos; counter(wangxiaosan); white-space: pre; &#125;&lt;p class=&quot;counter&quot;&gt;&lt;/p&gt; 上面CSS源代码使用&#39;\A&#39;使用inline水平元素换行，此技术若有兴趣，可参考之前的“使用CSS(Unicode字符)让inline水平元素换行”一文。 ④ 下面介绍下counters()方法。看似值多了个字母s, 但表意大变身。counters几乎可以说是嵌套计数的代名词。 我们平时的序号，不可能就只是1,2,3,4,.., 还会有诸如 1.1,1.2,1.3,...等的子序号。得，前者就是counter()干的事情，后者就是counters()干的事情。 基本用法为： 1counters(name, string); /* MDN上说，要想IE8兼容，这里逗号后面的空格要去掉，但是鄙人IE11的IE8模式看，无此问题 */ 其中，string参数为字符串（需要引号包围的）（必须参数），表示子序号的连接字符串。例如1.1的string就是&#39;.&#39;, 1-1就是&#39;-&#39;. 看上去很简单。但是，如果理解不是很深刻，日后在使用肯定会遇到麻烦——“咦？怎么没有子序列，明明语法正确的啊？”首先，记住这一句话，“普照源是唯一的”，所以，如果你在只在body标签上设置counter-reset，就算里面的子元素嵌套了祖宗十八代，还是不会有任何嵌套序号出现的！所以，要想实现嵌套，必须让每一个列表容器拥有一个“普照源”，通过子辈对父辈的counter-reset重置、配合counters()方法才能实现计数嵌套效果。 闻名不如见面。您可以狠狠地点击这里：CSS计数器内嵌demo 也会遇到这样的麻烦——“咦，怎么子序列不按层级顺序来啊，命名语法正确啊？” 还是要记住这一句话：“一个容器里的普照源(reset)是唯一的”，所以，如果你不小心把计数显示和技术reset元素以兄弟元素形式放在一起（虽然HTML内容布局呈现是没有异常的），就很可能会出现计数序号乱入的情况。 闻名不如见面。您可以狠狠地点击这里：CSS计数器counters列表被reset乱入demo 会看到标红的部分的序号显示异常了！ 为何会出现这个问题，我们看下HTML（主要是注释）： 1234567891011&lt;div class=&quot;reset&quot;&gt; &lt;div class=&quot;counter&quot;&gt;我是王小二&lt;/div&gt; &lt;div class=&quot;reset&quot;&gt;&lt;-- 这里的reset与上面的counter是兄弟关系，而不是父子关系。虽然布局渲染上没有差异。但是，一个容器的reset的唯一的，一旦子元素出现reset，会改变整个容器的嵌套关系，于是，后面的“王小三”、“王小四”其实已经进入了2级嵌套，因此显示的是1-3和1-4 --&gt; ... &lt;/div&gt; &lt;div class=&quot;counter&quot;&gt;我是王小三&lt;/div&gt; &lt;div class=&quot;counter&quot;&gt;我是王小四&lt;/div&gt; &lt;div class=&quot;reset&quot;&gt; &lt;div class=&quot;counter&quot;&gt;我是王小四的大儿子&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 如果上面的注释没看明白，您可以跟前面没有问题的demo做下HTML结构对比，或许就会豁然开朗！ ⑤ counters()也是支持style自定义递增形式的。 1counters(name, string, style) 与counter()的style参数使用一致，不赘述。 四、CSS计数器与display:none挖挖挖一个元素，如果设置了counter-increment, 但是其display的属性值是none或者含有hidden属性（针对支持浏览器），则此计数值是不会增加的。而visibility:hidden以及其他声明不会有此现象。 五、CSS计数器实际应用挖挖挖相比传统的ol,ul列表计数，CSS计数器的优势就在于灵活与强大，不足就是IE6/IE7不支持。 普照规则第一条，普照源唯一。所以，我们可以在头尾放两个差距甚远的列表，然后，这些列表自动显示序号。而ol/ul只能写死start实现，很不灵活，一旦列表有删减，就嗝屁了。 由于计数器是伪元素控制显示的。因此，我们几乎可以应用各种CSS样式，各种定位等。所以，基本上，只要有有序序号呈现的地方，就能使用CSS计数器。 例如，电商首页的图片slide广告上的1,2,3,4,...序号； 我们做分享时候使用的HTML5 web在线幻灯片就可以使用CSS计数器标注页数等；以及一开始给小伙伴们做的果汁工具的3个选择等。 我下笔之初本想搞几个高保真的例子的，写到这里发现，内容已经很多了。一篇技术文章，如果读了2分钟，发现才读了一半，后面的内容就会闪电过，然后会有些莫名的评论之类。因此，文章不易过长。所以，这里就要收尾了！ 六、最后的挖掘总结CSS计数器的斗量果然很深啊。如果不静心思考，会陷入很多想当然的误区。如果不全面学习，也无法感受到CSS计数器的强大潜力所在。就我自己而言，着实挖到大宝贝了。不知在座的诸位的挖掘成果如何呢？ 行文匆忙，疏漏难免，若有错误，欢迎指正；欢迎沟通欢迎交流，更欢迎在仔细阅读本文后对一些技术观点发起挑战！ 参考文章 Automatic Numbering With CSS Counters http://www.w3.org/TR/CSS2/generate.html#scope counter-reset counter-increment Using CSS counters 转载自张鑫旭的博客]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你的孤独，虽败犹荣——读书笔记]]></title>
    <url>%2F%E6%9D%82%E6%96%87%E9%9B%86%2FUntitled%2F</url>
    <content type="text"><![CDATA[你的孤独，虽败犹荣——读书笔记 放下，才能接纳； 接纳，才有新的力量。 第一章 不要在黎明前被冻死 我希望即使我们一辈子给人打工，也要打自己愿意打的工，做自己喜欢的事，拿自己应得钱。通过自己的能力去获取信任，有了信任，才能尽情去选择自己的生活。 孤独就是自己都忘记了与自己对话。 正在经历的孤独，我们称之为迷茫。经过的那些孤独，我们称之为成长。 简单的东西不一定是最好的，但最好的东西一定是简单的。 人一生会遇到3000万的人，两个人相爱的概率是0.000049。所以你不爱我，我不怪你。 有些承诺如一根针，毫无重量，却凛冽锐利，能直挺挺地插进每个人心里，伤口细微到毫无疼痛。 如果你认定苦是自己应得的，那么光必然会照耀到你身上。 青春，是一个容量极其有限的内存，没有人能十全十美，有些内容存储多了，自然有些内容就缺失了。 当我说些自己真正想说的，不伤害他人尊严的话时，别人会更在意我、欣赏我——因为那是你的思考，而不是转述别人的思考。 10.老同学，恐怕是世界上称呼得最生疏却对我们知根知底的人。 11.如果一个人只能全身心去做一件事，那就是青春。 12.你的对手每年都在更换，你的伙伴也是。你的收入每年都在增加，你的消费也是。你的眼界每年都在加宽，你心走的步伐也是。你越怕别人让你失望，你就越怕自己让别人失望。 13.有些人走着走着就不见了，但还有些人，走着走着，又在路口集合了。 14.逃避，就一直是输家。唯有面对，才是要赢的第一步。 15.好不好另说，能一直坚持下去，并希望越做越好，是我永远的信条。 16.每个人的人生中都有很多很多的转弯，但总有那么几个人让你转弯时不心惊不胆战，告诉你朝着那个方向就对了，并给你强大的力量。 17.主动，是能化劣势为优势的法宝。自己好好体会去吧。 18.那些你曾以为很要好的朋友，那些你曾以为会一直结伴走下去的人，不知道何时就在路途中走散了。 陪你走了一程的朋友，谢谢他们。 愿陪你走一生的朋友，谢谢老天。 19.我终于想明白了，所有因为某人而让自己生气的事情，一定要说出来。不说的话，自己越想越生气。说出来之后，自己踏实了，对方就会变得不踏实。这种一举两得的事情，干吗不做。 20.年龄从来不是衡量一个人是否成熟的标志，一个人是否成熟来源于他是否了解自己所作所为的目的，来源于他是否敢于承担所做决定的后果，来源于他对自己的了解与信任程度。 21.当一个人相信你的时候，你要做的不仅是对得起自己的内心，更要对得起对方对你的信任。 22.最终你会发现，领导不是为了管理我们，而是为了和我们一起把事情做得更好。 23.一个人开始变得完美，恰恰是从他愿意承认自己的不完美开始的。 24.就是这么一种人，进入你生命的时候并不让人欢天喜地，他们却能够在离开你之后，让你一直想念，万语千言。 第二章 一个人怕孤独，两个人怕辜负 爱情中没有胜者和败者，只有合适与不合适，不合适你再央求也没用，不如收拾好心情，燃烧起斗志，做一个能满足下一任的最佳男女朋友吧。 相爱，不过是学习开始彻底相信一个人。 一个不在意你是否开心的人，不在意你心情好坏的人，即使待在一起也是浪费自己的时间。 有效的争吵并不代表两个人感情不好，而是证明我们始终在为对方认真思考。 因为少而去珍惜，因为多而不在意。 不熟悉的人说句你好，都是天堂。熟悉的人对你再好，你也觉得是天经地义。 听歌，不会让你的心情立刻愉悦。听歌，只会让你找到愉悦的方式。 你是不是专业的并不重要，重要的是你认真去分享了，认真去表达了。 生命常有缺憾，幸好音乐能续久续长。 成长常有遗憾，幸好文字能温情温伤。 10.所谓夜深才会人静。其实好多时候，越是夜深，人越不平静。 第三章 趁一切还来得及 后来你才知道最亲近的人最需要你做的只是你在身边。 亲近的人永远把话藏在心底，却用行动告诉全世界自己很在意。 当年那么少人，那么少房子，我活得这样。现在那么多人，那么多房子，我还是活得一样。你说多那么多东西有什么用嘛。 不说话并不是不想说，而是不知道该说什么。 虽说时间会解决所有的问题，实质上它并没有解决问题，它只是帮我们把一些问题变得不那么重要。 第四章 我们的人生才刚刚开始 一直辛苦在对抗的不是别人，而是倔强的自己。 只要不中途放弃，就值得获取掌声。 大多数人不会在同一个地方工作一辈子，大多数人也不会在同一个岗位做一辈子，我们所有的累积都是为了给人生最后的那个位置打一个稳定的根基，所以每个获取经验的机会都会显得尤为重要。 曾经迷茫，如今释怀开阔。当下迷茫，却对未来笃定希望。 凡是没有答案的日子都是孤独的，但有了这样寂静的孤独，才有可能找到答案。 自己做出来的东西只有自己理解，但理解和懂不是一个概念，得到真正懂的时候，就能做出好的东西了。 对于一个北漂的新人，最重要的不是简单的安慰或者鼓励，而是在他们极度缺乏安全感的时候和他们站在一起。 不置可否，每个人的人生只能自己负责，别人的意见顶多只是参考而已。 如果一个人一辈子只能重复同样的一天，那该师世界上最寂寞的事情吧。 10.一个人的坚强不是看他外壳有多硬，而是看他的伤疤有多深。 11.一个对自己名字敏感的人，多少都是一个在意自己的人。 12.当你觉得自己的时间越来越重要的时候，你就越来越不愿去做无聊的事。 13.当你觉得一件事情特别糟糕的时候，你可以生气，但是不要气坏了自己，因为你要相信你的判断，一定会有其他人也和你一样。 第五章 走一天人迹罕至的路 如果放弃的话，也许这辈子都不会知道自己原来适合干这件事情。 很多事情在我们身上遭遇失败，不是因为我们做得太烂，而是因为我们决意放弃。 一切都来得及，不用那么着急往前赶。越是着急，越是什么都做不好。 一件事可以暂时不做，但不要彻底放弃，那很容易导致从内心否定自己。 人之所以会变老，并不是外界给了你多大的压力，给你再多的压力，你无所谓的话也是百毒不侵的。 道理对不对不是最重要的，态度对了才是最重要的。 人生苦短，不要把时间浪费在不相关的人身上。 如果你停止不前，就是谷底。如果你还在继续，就是上坡。这是我听过关于人生低谷最好的阐述。低谷是一种回忆，而不应该是一种现状。 总会听到一些感叹：还没年轻，就老了；还没成功，就失败了；还没绽放，就凋谢了；还没开始，就结束了。 第六章 有太多新鲜事物的世界 当面对两个选择时抛硬币总能奏效，并不是因为它能给出对的答案，而是在你把它抛向空中的那一秒里，你突然知道你希望它是什么。 我总觉得，你要你不把对方当成小孩，而是当成同龄人去对话，他们自然也能亲近你。 孤独没有不好，不接受孤独才不好。 真正的投入是孤独的，真正的爱是孤独的。若有一天你懂了这样的孤独，关于此生所有的拥有和放弃，其实无所谓成效，本身业已光荣。]]></content>
      <categories>
        <category>杂文集</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Intel Movidius神经计算棒从开始到精通（使用指导、性能测试）]]></title>
    <url>%2F%E7%A5%9E%E7%BB%8F%E8%AE%A1%E7%AE%97%E6%A3%92%2FIntel-Movidius%E7%A5%9E%E7%BB%8F%E8%AE%A1%E7%AE%97%E6%A3%92%E4%BB%8E%E5%BC%80%E5%A7%8B%E5%88%B0%E7%B2%BE%E9%80%9A%EF%BC%88%E4%BD%BF%E7%94%A8%E6%8C%87%E5%AF%BC%E3%80%81%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%EF%BC%89%2F</url>
    <content type="text"><![CDATA[爱板网已经发布过关于英特尔Movidius神经计算棒的评测文章，但是限制于篇幅没有很细的把内容逐一说明，所以本篇内容是对评测的细化以及补充，哪怕是零基础的朋友，在看完本文之后相信也能迅速上手Intel Movidius神经计算棒。 在开始之前，让我先问你三个问题： 如果你能在USB棒上运行最先进的神经网络？如果你能看到这个USB棒拥有10倍于你CPU的性能？在达成以上条件的情况下，如果整个设备的成本低于100美元？是不是听起来非常有趣？ 来，一起进入英特尔的Movidius神经计算棒的世界。 Movidius神经计算棒（NCS） 大概树莓派的用户会特别欢迎Movidius神经计算棒，因为它可以显著改善图像分类并且提升对图像的检测速度和能力，“众里寻他千百度，慕然回首那人却在灯火阑珊处”，或许这句话是对你突然发现Movidius神经计算棒最好的诠释。你会发现Movidius NCS“正是你所需要的”可以加快神经网络推断时间的小型化以及极具性价比的人工智能玩意。 本篇文章，我们将讨论： Movidius神经计算棒能够做什么？值不值得买？如何快速，轻松地的运行Movidius NCS？对比在MacBook Pro以及Raspberry Pi上使用/不使用Movidius NCS所需的神经网络推断时间。什么是英特尔Movidius神经计算棒？ 英特尔的Neural Compute Stick是一款USB3.0接口的拇指大小的深度学习机器，下面几点你需要了解。 你可以把NCS看作是一个USB供电的GPU，尽管这有些夸大——因为它并不是一个GPU，而且只能用于预测/推理，而不是训练。更确切的说，我是将NCS归类为协处理器，它只有一个目的：运行神经网络计算。在下文中，主要使用NCS进行图像分类。 NCS 不应该用于训练神经网络模型，而是用于基于现有的模型做推理，由于NCS旨在配合单板计算机（如树莓派）使用，意味着功耗非常低，使其不适合实际训练网络。 所以现在你就会有疑问：我到底该不该购买Movidius NCS吗？（爱板商城有树莓派+Movidius神经计算棒组合套餐的优惠促销） 在Movidius神经计算棒的内部有一颗Myriad 2处理器（28nm工艺），具有80~150 GFLOPS的性能，该处理器也被称为视觉处理单元 （或视觉加速器），功耗仅为1W左右（作为参考，树莓派3B在HDMI关闭，LED熄灭和WiFi开启时功耗大概在1.2W）。 是否值得购买NCS取决于下面几个问题的答案： 你是否有立即使用神经网络做推断的需求？或者还是愿意花77美元玩另一种玩意？您是否愿意加入一个具有发展前景但是目前规模不算大的AI社区，另外也不清楚Myraid 2是否能经得住市场长期考验？你是否愿意将一台机器（或VM）投入到SDK的开发中？树莓派用户：您是否愿意将独立的Pi或至少一个单独的microSD用于NCS开发？问题1取决于你。 我提出问题2的原因是因为英特尔的文档太简陋了，而且在支持力度上不是那么友好，比如说我之前试用的Galileo产品上，现在已经停止更新了。我提这个的意思并不是说NCS也会发生，毕竟NCS处于深度学习领域，目前正在全速前进，所以这款产品的未来看起来还是不错的，并且它也没有太多的竞争产品，至少目前是这样的。 问题2和3（及其答案）是相关的。简而言之，您无法将开发环境与虚拟环境隔离，安装程序实际上会从您的系统中删除先前安装的OpenCV。出于这个原因，您不应该在当前项目和工作环境的任何位置获得安装程序脚本。从目前来说，大多数人都会购买Movidius NCS与Raspberry Pi或其他单板计算机配对使用。 问题4是针对树莓派的。说到树莓派，如果您一直在关注爱板网树莓派版块上的其它教程，您就会意识到将新项目与现有项目的环境隔离有多重要。我对神经计算棒最大的抱怨之一是英特尔的安装脚本实际上会让你的虚拟环境几乎无法使用，安装程序会从Debian/Ubuntu Aptitude repos下载软件包并更改你的PYTHONPATH系统变量。 真的很麻烦，为了安全起见，所以强烈建议你使用新的microSD与Raspbian Stretch，如果您正在开发一个可部署项目，您甚至可能会购买另一个Pi来与NCS结合。 Movidius NCS工作流程 英特尔Movidius NCS工作流程 理解神经计算棒的工作流程会使得使用NCS变得更加容易，所以是非常有必要的。 我们实际使用的时候，最终是生成一个graph文件来部署到NCS，如果你愿意，这个graph文件可以和你的Python脚本位于同一个目录中——通过NCS API将graph文件发送到NCS。 一般来说，使用NCS的工作流程是： 使用预先训练好的TensorFlow/Caffe模型或在Ubuntu/Debian上使用Tensorflow/Caffe 训练网络。使用NCS SDK工具链生成graph文件将graph文件和NCS部署到运行Ubuntu的单板计算机上，我用Raspberry Pi 3 B运行Raspbian（基于Debian）使用Python，通过NCS API将graph文件发送到NCS请求图像预测，处理预测结果并根据结果进行（任意）操作本文将只使用NCS API在树莓派上建立工具链，这种方式可以生成最低限度的SDK工具用于创建graph文件，但是不会安装Caffe，Tensorflow等软件，毕竟目前树莓派也不支持TendorFlow。 为了简单起见，可以直接使用Movidius GitHub页面上（https://github.com/movidius/ncsdk/tree/master/examples/caffe/SqueezeNet）预先训练好的Caffe模型和prototxt文件（或者也可以通过Makefile从DeepScale GitHub仓库下载）。 执行Makefile将会： 下载Caffe文件使用NCS API生成graph文件这里，我们将使用官方的示例脚本+一个静态图像来使用Movidius神经计算棒。之后，还将创建自己的自定义图像分类基准测试脚本。 首先，让我们准备我们的树莓派。 在纯API模式下设置树莓派和NCS 通过阅读一些稀少（确实稀少，赶潮流的东西就是金贵）的文档，我认识到了树莓派无法处理官方提供的NCSDK。（哈哈，好笑吧） 但后来又通过英特尔官方Blog找到了解决方法（很讽刺吧），让我可以在仅API模式下设置树莓派（教程地址：https://movidius.github.io/blog/ncs-apps-on-rpi/），效果很好，用这种放肆很快就能运转树莓派与神经计算棒的组合，现在就说说具体该怎么做。 对于你的树莓派，我建议你在全新的Raspbian Stretch系统上以纯API模式安装SDK。 如果你的树莓派已经安装了Raspbian Stretch OS，建议你重新再树莓派官网下载镜像烧写，不然容易出现各种问题，相信我，Intel官方提供的SDK对环境极其苛刻。 然后，就可以启动你的树莓派并连接到WiFi。如果您愿意，可以通过SSH连接或使用显示器+键盘/鼠标完成以下所有操作。 更新系统：1sudo apt-get update &amp;&amp; sudo apt-get upgrade 然后，安装一堆软件包：123456789101112131415161718sudo apt-get install -y libusb-1.0-0-dev libprotobuf-devsudo apt-get install -y libleveldb-dev libsnappy-devsudo apt-get install -y libopencv-devsudo apt-get install -y libhdf5-serial-dev protobuf-compilersudo apt-get install -y libatlas-base-dev git automakesudo apt-get install -y byacc lsb-release cmakesudo apt-get install -y libgflags-dev libgoogle-glog-devsudo apt-get install -y liblmdb-dev swig3.0 graphvizsudo apt-get install -y libxslt-dev libxml2-devsudo apt-get install -y gfortransudo apt-get install -y python3-dev python-pip python3-pipsudo apt-get install -y python3-setuptools python3-markdownsudo apt-get install -y python3-pillow python3-yaml python3-pygraphvizsudo apt-get install -y python3-h5py python3-nose python3-lxmlsudo apt-get install -y python3-matplotlib python3-numpysudo apt-get install -y python3-protobuf python3-dateutilsudo apt-get install -y python3-skimage python3-scipysudo apt-get install -y python3-six python3-networkx 需要注意的是，我这是从Debian存储库安装了 libopencv - dev，这是我第一次推荐它，也希望是最后一次。因为这里通过apt-get安装OpenCV存在3个问题 （1）安装较旧版本的OpenCV（2）不安装完整版本的OpenCV（3）没法好好支持各种系统操作再一次，我不推荐这种方法来安装OpenCV。 另外，你可以看到上面安装一大堆我通常喜欢用pip在Python虚拟环境中管理的包，所以再一次请确保你使用的是新的存储卡，这样你就不会在你的树莓派上搞砸你现在可能正在做的项目。 好了，现在先来创建一个工作空间目录并克隆NCSDK：1234cd ~mkdir workspacecd workspacegit clone https://github.com/movidius/ncsdk 再克隆ncappzoo，因为我们稍后会需要它。1git clone https://github.com/movidius/ncappzoo 然后找到下面的目录：1cd ncsdk/api/src 在该目录中，使用Makefile以纯API模式安装SDK：12makesudo make install 测试NCS上的Raspberry Pi安装 安装结束后有必要测试安装情况，将NCS插到树莓派上，这里使用NC App Zoo中的代码进行测试安装情况。12cd ncappzoo/apps/hello_ncs_pymake run 运行结果 如果OK，你应该看到如上的输出。 生成Movidius NCS神经网络 SqueezeNet网络模型包含在NC App Zoo中，通过使用Makefile很容易生成所需graph文件。 更多基于官方提供的demo演示应用可以参考爱板网之前的评测（树莓派+Movidius NCS神经计算棒=2018年最佳的AI学习平台？），本文不再重复。 树莓派和深度学习成果 本次基准测试中，首先使用树莓派3的CPU测试，然后再通过使用树莓派3与NCS的组合的测试情况。 为了好玩，后来又加入了Macbook Pro（带和不带NCS）的测试结果（不过这是通过构建和配置的Ubuntu 16.04虚拟机实现的）。 测试中使用三种深度学习模型： SqueezeNetGoogLeNetAlexNet为了简单起见，每次都使用同一张图片运行分类——理发椅： 由于终端输出的结果很长，所以下面我会分开截好几张图，另外，为了便于查看对比结果，最后我会整理一个对比结果表格。 以下是CPU命令（你也可以在你的树莓派或桌面/笔记本电脑上实际运行此命令）： github-1 注意： 为了使用OpenCV DNN模块，您至少要安装OpenCV 3.3版本。 下面是NCS上的命令， 使用刚刚通过的新修改后的脚本（你也可以在你的树莓派或桌面/笔记本电脑上实际运行此脚本）： NCS API模式工具链使用OpenCV 2.4，因此没有新的DNN模块。您不能在NCS中使用虚拟环境，因此您需要完全隔离的系统。 现在将结果汇总在表格中： 与使用树莓派上的CPU在GoogLeNet上的速度相比，NCS与树莓派的组合实现了6.45倍的分类加速（545％），由此可知，神经计算棒会在大型的神经网络上会带来明显的加速，例如上面比较的三个网络。 不过，将我的MacBook Pro与MBP&amp;NCS组合相比时，NCS不再有傲娇优势了，甚至会更差——这主要有以下几个原因： 首先，毫无疑问MBP拥有更强大的CPU（毕竟是桌面级别的层次，功耗也摆在那）。而且事实也证明，在CPU上运行完整推理的速度要快于将图像从CPU移动到NCS并将结果返回的时间差；其次，通过USB与虚拟机通信并不友好，存在延迟等问题，更别谈更好的支持USB3.0。 值得注意的是，Raspberry Pi 3B只有USB 2.0接口，如果真的想要单板电脑安装的速度，请选择支持USB 3.0的机器，比如之前爱板网评测过的Up Squared Board+NCS组合，如果进行基准测试，数据传输速度将会很明显。本篇文章先到这里，后续会继续更新。 总结 今天我们探索了一个新奇、超前的玩意——英特尔Movidius神经计算棒，此文的目的是向你展示这个新的深度学习设备所具备的潜力，文章演示了如何使用NCS的工作流程以及API。 一般来说，NCS工作流程需要： 使用运行Ubuntu/Debian的机器（或使用预先训练的网络）通过Tensorflow或Caffe培训网络。使用NCS SDK生成graph文件将graph文件和NCS部署到运行Linux（Debian）的单板计算机上，文章中是通过树莓派3B（基于Debian）实现的。执行推理，分类，对象检测等本文跳过了第1步和第2步，相应的，拿现成的直接可以在树莓派上使用的graph文件测试，然后，编写基于Python的分类基准测试脚本，并分析了在树莓派上实现10倍加速的结果。目前为止，NCS的功能留给我的印象非常深刻——它与树莓派组合非常友好（除了目前不支持TensorFlow），希望你会喜欢英特尔的这个玩意！]]></content>
      <categories>
        <category>神经计算棒</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[nginx-win-rtmp]]></title>
    <url>%2F%E7%9B%B4%E6%92%AD%E6%B5%81%2Fnginx-win-rtmp%2F</url>
    <content type="text"><![CDATA[1.下载 nginx 1.7.11.3 Gryphon 下载链接，下载完成后解压， 将解压后的目录命名为 nginx-1.7.11.3-Gryphon2.下载服务器状态检查程序 stat.xsl（注：直接clone到nginx-1.7.11.3-Gryphon目录下） 下载地址https://github.com/arut/nginx-rtmp-module/ 3.配置文件 conf\nginx-win-rtmp.conf 内容如下:（注：用记事本打开直接复制粘贴，避免编码格式引起错误）123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193#user nobody;# multiple workers works !worker_processes 2; #error_log logs/error.log;#error_log logs/error.log notice;#error_log logs/error.log info; #pid logs/nginx.pid; events &#123; worker_connections 8192; # max value 32768, nginx recycling connections+registry optimization = # this.value * 20 = max concurrent connections currently tested with one worker # C1000K should be possible depending there is enough ram/cpu power # multi_accept on;&#125; rtmp &#123; server &#123; listen 1935; chunk_size 4000; application live &#123; live on; # record first 1K of stream record all; record_path /tmp/av; record_max_size 1K; # append current timestamp to each flv record_unique on; # publish only from localhost allow publish 127.0.0.1; deny publish all; #allow play all; &#125; &#125;&#125; http &#123; #include /nginx/conf/naxsi_core.rules; include mime.types; default_type application/octet-stream; #log_format main &apos;$remote_addr:$remote_port - $remote_user [$time_local] &quot;$request&quot; &apos; # &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos; # &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;; #access_log logs/access.log main; # # loadbalancing PHP# upstream myLoadBalancer &#123;# server 127.0.0.1:9001 weight=1 fail_timeout=5;# server 127.0.0.1:9002 weight=1 fail_timeout=5;# server 127.0.0.1:9003 weight=1 fail_timeout=5;# server 127.0.0.1:9004 weight=1 fail_timeout=5;# server 127.0.0.1:9005 weight=1 fail_timeout=5;# server 127.0.0.1:9006 weight=1 fail_timeout=5;# server 127.0.0.1:9007 weight=1 fail_timeout=5;# server 127.0.0.1:9008 weight=1 fail_timeout=5;# server 127.0.0.1:9009 weight=1 fail_timeout=5;# server 127.0.0.1:9010 weight=1 fail_timeout=5;# least_conn;# &#125; sendfile off; #tcp_nopush on; server_names_hash_bucket_size 128; ## Start: Timeouts ## client_body_timeout 10; client_header_timeout 10; keepalive_timeout 30; send_timeout 10; keepalive_requests 10;## End: Timeouts ## #gzip on; server &#123; listen 80; server_name localhost; location /stat &#123; rtmp_stat all; rtmp_stat_stylesheet stat.xsl; &#125; location /stat.xsl &#123; root nginx-rtmp-module/; &#125; location /control &#123; rtmp_control all; &#125; #charset koi8-r; #access_log logs/host.access.log main; ## Caching Static Files, put before first location #location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ &#123; # expires 14d; # add_header Vary Accept-Encoding; #&#125; # For Naxsi remove the single # line for learn mode, or the ## lines for full WAF mode location / &#123; #include /nginx/conf/mysite.rules; # see also http block naxsi include line ##SecRulesEnabled; ##DeniedUrl &quot;/RequestDenied&quot;; ##CheckRule &quot;$SQL &gt;= 8&quot; BLOCK; ##CheckRule &quot;$RFI &gt;= 8&quot; BLOCK; ##CheckRule &quot;$TRAVERSAL &gt;= 4&quot; BLOCK; ##CheckRule &quot;$XSS &gt;= 8&quot; BLOCK; root html; index index.html index.htm; &#125; # For Naxsi remove the ## lines for full WAF mode, redirect location block used by naxsi ##location /RequestDenied &#123; ## return 412; ##&#125; ## Lua examples !# location /robots.txt &#123;# rewrite_by_lua &apos;# if ngx.var.http_host ~= &quot;localhost&quot; then# return ngx.exec(&quot;/robots_disallow.txt&quot;);# end# &apos;;# &#125; #error_page 404 /404.html; # redirect server error pages to the static page /50x.html # error_page 500 502 503 504 /50x.html; location = /50x.html &#123; root html; &#125; # proxy the PHP scripts to Apache listening on 127.0.0.1:80 # #location ~ \.php$ &#123; # proxy_pass http://127.0.0.1; #&#125; # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000 # #location ~ \.php$ &#123; # root html; # fastcgi_pass 127.0.0.1:9000; # single backend process # fastcgi_pass myLoadBalancer; # or multiple, see example above # fastcgi_index index.php; # fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; # include fastcgi_params; #&#125; # deny access to .htaccess files, if Apache&apos;s document root # concurs with nginx&apos;s one # #location ~ /\.ht &#123; # deny all; #&#125; &#125; # another virtual host using mix of IP-, name-, and port-based configuration # #server &#123; # listen 8000; # listen somename:8080; # server_name somename alias another.alias; # location / &#123; # root html; # index index.html index.htm; # &#125; #&#125; # HTTPS server # #server &#123; # listen 443 ssl spdy; # server_name localhost; # ssl on; # ssl_certificate cert.pem; # ssl_certificate_key cert.key; # ssl_session_timeout 5m; # ssl_prefer_server_ciphers On; # ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:ECDH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!eNULL:!MD5:!DSS:!EXP:!ADH:!LOW:!MEDIUM; # location / &#123; # root html; # index index.html index.htm; # &#125; #&#125;&#125; 4.启动服务器1nginx.exe -c conf\nginx-win-rtmp.conf 5.使用ffmpeg、ffplay进行推流拉流验证（直接ffmpeg官方下载windows下的可执行文件） 5.1推流测试，使用ffmpeg命令完成即可1ffmpeg.exe -re -i inputfile.mp4 -vcodec libx264 -acodec aac -f flv rtmp://localhost:1935/live/home 5.2拉流测试，使用ffplay命令完成即可1ffplay.exe rtmp://localhost:1935/live/home nginx 命令启动nginx服务，启动时会一闪而过是正常的1start nginx 查看任务进程是否存在，dos或打开任务管理器都行1tasklist /fi &quot;imagename eq nginx.exe&quot; 重启服务1nginx -s reload 快速停止1nginx -s stop 完整有序的关闭1nginx -s quit index 文件配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&lt;!doctype html&gt;&lt;html&gt;&lt;h1&gt;欢迎来到xxh的直播间&lt;/h1&gt;&lt;meta charset=&quot;utf-8&quot;&gt;&lt;script src=&quot;http://vjs.zencdn.net/5.5.3/video.js&quot;&gt;&lt;/script&gt;&lt;link href=&quot;http://vjs.zencdn.net/5.5.3/video-js.css&quot; rel=&quot;stylesheet&quot;&gt;&lt;!-- If you&apos;d like to support IE8 --&gt;&lt;script src=&quot;http://vjs.zencdn.net/ie8/1.1.1/videojs-ie8.min.js&quot;&gt;&lt;/script&gt;&lt;div class=&quot;openFlashTips&quot; style=&quot;width:300px;position:absolute;top:200px;left:225px;z-Index:9999;color:white&quot;&gt;视频无法正常播放，请点击下方启用flash&lt;/div&gt;&lt;video id=&quot;my-video&quot; style=&quot;color:black;width:750px;height:350px&quot; class=&quot;video-js&quot; autoplay controls preload=&quot;auto&quot; width=&quot;750&quot; height=&quot;350&quot; data-setup=&quot;&#123;&#125;&quot;&gt; &lt;source src=&quot;rtmp://localhost:1935/live/home&quot; type=&quot;rtmp/flv&quot;&gt;//在这里改url&lt;/video&gt;&lt;embed width=&quot;300&quot; height=&quot;70&quot; class=&quot;openFlash&quot; style=&quot;position:absolute;top:130px;left:225px;z-Index:9999;&quot; type=&quot;application/x-shockwave-flash&quot;&gt;&lt;script type=&quot;text/javascript&quot; language=&quot;JavaScript&quot;&gt; function flashChecker() &#123; var hasFlash = 0; //是否安装了flash var flashVersion = 0; //flash版本 var isIE = /*@cc_on!@*/0; //是否IE浏览器 if (isIE) &#123; var swf = new ActiveXObject(&apos;ShockwaveFlash.ShockwaveFlash&apos;); if (swf) &#123; hasFlash = 1; VSwf = swf.GetVariable(&quot;$version&quot;); flashVersion = parseInt(VSwf.split(&quot; &quot;)[1].split(&quot;,&quot;)[0]); &#125; &#125; else &#123; if (navigator.plugins &amp;&amp; navigator.plugins.length &gt; 0) &#123; var swf = navigator.plugins[&quot;Shockwave Flash&quot;]; if (swf) &#123; hasFlash = 1; var words = swf.description.split(&quot; &quot;); for (var i = 0; i &lt; words.length; ++i) &#123; if (isNaN(parseInt(words[i]))) continue; flashVersion = parseInt(words[i]); &#125; &#125; &#125; &#125; return &#123;f: hasFlash, v: flashVersion&#125;; &#125; var fls = flashChecker(); var s = &quot;&quot;; if (fls.f) &#123; document.getElementsByClassName(&quot;openFlash&quot;)[0].style.display = &quot;none&quot;; document.getElementsByClassName(&quot;openFlashTips&quot;)[0].style.display = &quot;none&quot;;// document.write(&quot;您安装了flash,当前flash版本为: &quot; + fls.v + &quot;.x&quot;); &#125; else &#123; document.getElementsByClassName(&quot;openFlash&quot;)[0].style.display = &quot;block&quot;; document.getElementsByClassName(&quot;openFlashTips&quot;)[0].style.display = &quot;block&quot;;// document.write(&quot;您没有安装flash&quot;); &#125;&lt;/script&gt;&lt;/html&gt; 需要下载5.x版本video.js OBS开启推流在nginx.conf里面设置好123application live &#123; live on; &#125; 的相关参数然后设置自定义推流地址1rtmp://your_ip:port/live OBS黑屏原因是未设置集成显卡 附一篇源码编译nginx的文章 https://blog.csdn.net/never715/article/details/74078954]]></content>
      <categories>
        <category>直播流</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[服务器开启socks5]]></title>
    <url>%2F%E7%88%B1%E5%9B%BD%E7%88%B1%E5%85%9A%E7%88%B1%E4%BA%BA%E6%B0%91%2F%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%90%AFsocks5%2F</url>
    <content type="text"><![CDATA[科学上网，拒绝分享安装某shadow12sudo apt install python3 python3-pip proxychainspip install shadowsocks 配置1234567891011121314151617181920212223242526sudo vim /etc/shadowsocks.json&#123; &quot;server&quot;: &quot;0.0.0.0&quot;, &quot;server_ipv6&quot;: &quot;::&quot;, &quot;local_address&quot;: &quot;127.0.0.1&quot;, &quot;local_port&quot;: 1081, &quot;port_password&quot;:&#123; &quot;端口1&quot;:&quot;密码1&quot;, &quot;端口2&quot;:&quot;密码2&quot;, &quot;端口3&quot;:&quot;密码3&quot;, &quot;端口4&quot;:&quot;密码4&quot; &#125;, &quot;timeout&quot;: 120, &quot;udp_timeout&quot;: 60, &quot;method&quot;: &quot;chacha20&quot;, &quot;protocol&quot;: &quot;auth_sha1_compatible&quot;, &quot;protocol_param&quot;: &quot;&quot;, &quot;obfs&quot;: &quot;http_simple_compatible&quot;, &quot;obfs_param&quot;: &quot;&quot;, &quot;dns_ipv6&quot;: false, &quot;connect_verbose_info&quot;: 0, &quot;redirect&quot;: &quot;&quot;, &quot;fast_open&quot;: false, &quot;workers&quot;: 10&#125; 解决chacha20加密问题 从官网下载： wget https://download.libsodium.org/libsodium/releases/LATEST.tar.gz 从 github 下载（其中 1.0.10 是 libusodium 的版本号，可以改成最新的）： wget https://github.com/jedisct1/libsodium/releases/download/1.0.10/libsodium-1.0.10.tar.gz 官网下载的： tar xzvf LATEST.tar.gz github 下载的： tar xzvf libsodium-1.0.10.tar.gz 12345cd libsodium*./configsudo make -j8&amp;&amp;sudo make installecho /usr/local/lib &gt; /etc/ld.so.conf.d/usr_local_lib.confldconfig 启动以及本地监听12setsid sslocal -c /etc/shadowsocks.jsonssh -NTfL 0.0.0.0:your_desired_port:localhost:1080 -p your_ssh_port your_ssh_address@username 安装锐速如果你想获取更加流畅的网速体验，就需要进行下一步：更换内核，安装锐速 安装脚本，只测试了适用于 Ubuntu 16.04，据说也适用于 Ubuntu 14.041wget xiaofd.github.io/ruisu.sh &amp;&amp; bash ruisu.sh 该脚本会更换系统内核，并自动重启，重启后不出问题的话就已经安装好了锐速并启动，可以使用ps -ef | grep(可做文件内的字符串查找) appex查看是否在运行，同时注意 ShadowsocksR 是否已启动 安装后的文件放在/appex目录下，运行脚本为/appex/bin/serverSpeeder.sh，下面是该脚本的命令参数1root@ubuntu:~# /appex/bin/serverSpeeder.sh 需要注意的是在停止后重新运行需要serverSpeeder.sh renewLic生成新的 License 使用脚本查看运行状态1root@ubuntu:~# /appex/bin/serverSpeeder.sh status 服务器测速这里介绍一个服务器测速脚本：speedtest-cli。这是一个命令行脚本用于测试网络的上行和下行带宽。GitHub 官方地址 脚本是用 Python 写的，可以使用pip安装。或者直接下载运行脚本，具体看 GitHub 上的文档 1wget -O speedtest-cli https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py &amp;&amp; chmod +x speedtest-cli 运行脚本，系统会自动判断你服务器所在位置，并找到最近的节点进行测速]]></content>
      <categories>
        <category>爱国爱党爱人民</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[《卜算子·黄州定慧院寓居作》赏析]]></title>
    <url>%2F%E6%9D%82%E6%96%87%E9%9B%86%2F%E3%80%8A%E5%8D%9C%E7%AE%97%E5%AD%90%C2%B7%E9%BB%84%E5%B7%9E%E5%AE%9A%E6%85%A7%E9%99%A2%E5%AF%93%E5%B1%85%E4%BD%9C%E3%80%8B%E8%B5%8F%E6%9E%90%2F</url>
    <content type="text"><![CDATA[1234 卜算子·黄州定慧院寓居作 宋代：苏轼.缺月挂疏桐，漏断人初静。时见幽人独往来，缥缈孤鸿影。(时见 一作：谁见)惊起却回头，有恨无人省。拣尽寒枝不肯栖，寂寞沙洲冷。 译文及注释译文弯弯的勾月悬挂在疏落的梧桐树上；夜阑人静，漏壶的水早已滴光了。有谁见到幽人独自往来，仿佛天边孤雁般飘渺的身影。黑夜中的它突然受到惊吓，骤然飞起，并频频回头，却总是无人理解它内心的无限幽恨。它不断于寒冷的树枝间逡巡，然而不肯栖息于任何一棵树上，最后只能寂寞地降落在清冷的沙洲上。 注释漏断：即指深夜。漏，指古人计时用的漏壶；即指深夜。原题“黄州定惠寺寓居作”。漏：指更漏而言。这里“漏断”不过说夜深罢了。幽：《易·履卦》：“幽人贞吉”，其义为幽囚。引申为幽静、优雅。孤鸿：张九龄《感遇》十二之四：“孤鸿海上来。”胡仔《苕溪渔隐丛话》前集三十九：“此词本咏夜景，至换头但只说鸿，正如《贺新郎》词“乳燕飞华屋”，至换头但只说榴花。….“按两词均系泛咏，本未尝有”夜景“等题，多说鸿，多说石榴，既无所妨，亦未必因之而奇妙。胡评似未谛。省：理解。“无人省“，犹言”无人识“。或以为“拣尽寒枝“有语病，亦见注⑷所引同书同条。《稗海》本《野客丛书》：”观隋李元操《鸿雁行》曰：“夕宿寒枝上，朝飞空井旁。“坡语岂无自邪？“此言固是。寒枝意广泛，又说”不肯栖“，本属无碍。此句亦有良禽择木而栖的意思。《左传》哀公十一年：”鸟则择木，木岂能择鸟。“杜甫《遣愁》：”择木知幽鸟。“末句一本作“枫落吴江冷“，全用唐人崔信明断句，且上下不接，恐非。▲ 参考资料： [1] 俞平伯 ．唐宋词选释 ．北京 ：人民文学出版社 ，1979年10月版 ：第106-107页 ．[2] 陆林编注 ．宋词 ．北京 ：北京师范大学出版社 ，1992年11月版 ：第67页 ．[3] 蘅塘退士 等 ．唐诗三百首·宋词三百首·元曲三百首 ．北京 ：华文出版社 ，2009年11月版 ：第212页 ． 创作背景 据史料记载，此词为公元1082年（元丰五年）十二月或公元1083年（宋神宗元丰六年）初作于黄州，定慧院在今天的湖北黄岗县东南，又作定惠院，苏轼另有《游定惠院记》一文。由上可知这首词是苏轼初贬黄州寓居定慧院时所作。 赏析 这是苏轼的一首名词《卜算子》。现在通行的各个版本的词选中都有一个小序：“黄州定慧院寓居作。”据史料记载，此词为公元1083年（神宗元丰六年）初作于黄州，定慧院在今天的湖北黄冈县东南，苏轼另有《游定惠院记》一文。由上可知这首词是苏轼初贬黄州寓居定慧院时所作。被贬黄州后，虽然自己的生活都有问题，但苏轼是乐观旷达的，能率领全家通过自身的努力来渡过生活难关。但内心深处的幽独与寂寞是他人无法理解的。在这首词中，作者借月夜孤鸿这一形象托物寓怀，表达了孤高自许、蔑视流俗的心境。]]></content>
      <categories>
        <category>杂文集</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[如何找准你在数据科学领域的职业方向]]></title>
    <url>%2F%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%2F%E5%A6%82%E4%BD%95%E6%89%BE%E5%87%86%E4%BD%A0%E5%9C%A8%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E9%A2%86%E5%9F%9F%E7%9A%84%E8%81%8C%E4%B8%9A%E6%96%B9%E5%90%91%2F</url>
    <content type="text"><![CDATA[《数据科学家:21世纪最性感的工作》是《哈佛商业评论》(HBR)上最受欢迎的文章之一，激励了无数人投身分析领域。这篇发表在《哈佛商业评论》上的文章的主题之一是分析行业工作岗位增长的趋势。IBM最近预测，到2020年，美国数据专业人员的数量将从36.4万人增加到272万人。毫无疑问，整个行业的商业分析职位空缺都在激增，但所有这些职位都需要同样的技能吗?我收到了很多关于分析行业可能的职业发展轨迹的问题。这些查询通常来自那些想要在分析领域有所突破的人，或者已经在这个行业工作并正在寻找更深层角色的人。在本文中，我们将研究数据分析行业中可用的主要角色。我还将提出一个框架来思考您在商业分析领域的职业生涯。 一、关于数据分析市场该行业将需要大量的大数据和机器学习专家，甚至需要更多(约10倍)的人能够根据分析做出决策，尽管他们可能不是大数据或机器学习方面的专家。通常的要求就是“具备基于大数据分析的理解和决策技能”。这些角色主要是战略角色和产品管理角色，它们可以为分析专家定义需要解决的新挑战。我们将在本文后面将这些战略角色与数据科学家角色进行对比。首先，让我们看看这个行业角色的多元化。如果你画一个分析的词云,您将看到所有的词出现,包括统计、计算机编程、战略、规划、报告、等领域的业务分析是极其多样化。想想你的职业生涯有这么多可能的选择，这可能会让你不知所措。 二、业务分析专业人士是做什么的?“业务分析”这个词完美地总结了我们在业务分析下分类的每种类型的工作。“业务”强调商业理解的重要性，“分析”指的是统计、计算机工程和运营研究在这类角色中的重要性。分析专业人士最终可以在一个非常以战略为导向的角色中工作，也可以作为一个非常专业的深度学习科学家。前者拥有更强大的业务组件，而后者拥有更强大的分析组件。显然，您的角色通常在这两个组件之间进行权衡，您可以在两个组件的比例不同的角色之间进行切换。为帮助理解，我在下面的图表中绘制了我们行业中的各种角色: 显然，上面的图表是我个人对这个行业的理解，每个角色在这个图表中的位置当然是可以争论的。我想让你关注的主要观点是，你可以在商业分析行业中扮演的角色的多样性，以及你可以从当前角色中选择的多样性。首先，让我们试着理解上面关于角色类别的5个突出显示的框。 报告的角色这是业务分析专业人员的主要角色类别。角色主要关注“发生了什么(事件)”，而不是“它(事件)为什么发生”。然而，在公司自动化了许多这些过程，机器学习变得流行之后，这些角色中的大多数都在最近发生了变化。然而，仍然有许多角色将有超过50%的工作是报告，其余的角色将回答这个问题——“为什么会发生这样的事件?” 中间分析角色这就是我职业生涯开始时所扮演的角色。大多数经济学/统计学/计算机科学毕业生将以这些角色开始他们的职业生涯。这是业务和分析的最佳组合。中间分析领域的角色也非常多样化。在这一类别中，一个极端的角色将集中在试图解决“现在发生了什么?”这类中的另一个极端是高度关注业务的角色，比如产品定价，您需要创建许多业务场景，并为公司销售的产品找到最优价格。大多数角色在了解业务和使用诸如决策管理/风险分析/欺诈分析的深度学习等前沿工具之间取得了更理想的平衡。这些角色大多涉及自动化决策。例如，您可能需要创建一个算法，该算法可以基于客户风险概要接受或拒绝信用卡应用程序，或者可以选择具有较高倾向的客户来选择保险产品的交叉销售报价。所有这些业务问题都要求您在大客户概要文件上创建预测模型，并根据一些业务度量对其进行排序。如果你不知道下一步该去哪里，找到适合自己的一个好方法就是在这两个盒子的边界上扮演一个角色。例如，如果你想在未来扮演一个战略角色，你可以通过扮演一个基于损益表的中间分析角色(如产品定价)来测试你的适合度。为了掌握战略角色的诀窍，您还可以选择其他一些角色，比如portfolio analytics。请注意，如果您选择在策略角色的道路上前进，那么您可能不得不离开数据科学技术，比如深度学习。另一方面，如果您想测试您是否适合作为数据科学家，您可以担任业务嵌入式数据科学家角色，而不是纯粹的数据科学家角色。这样的话，在你走上以研究为导向的工作岗位之前，你不会失去对公司的掌控。除了以上两条路径，您还有一种方法可以在业务和分析之间找到很好的平衡——技术产品经理角色。但这类角色在行业中并不容易获得。数据科学主要被公司用来通过建立数据支持的战略来发现相对于其他公司的竞争优势。像谷歌和Facebook这样的科技公司不仅利用分析来制定战略，而且也用来创造产品。例如，谷歌即时搜索是一种使用机器学习提供搜索结果的技术产品。这些科技公司需要具备商业损益表和机器学习技能的人才来设计这类产品。如果你选择在这条道路上继续前进，你不仅可以申请大型科技巨头，还可以在NICE、Aspect或interaction等小众技能公司中寻找产品经理的职位。 战略角色如果所有的企业都处在一个完全竞争的市场中，他们如何赚钱?如果你是一名经济学学生，你就会知道答案。所有成功的企业都是建立在市场效率低下的基础上的，因此没有“完全竞争”。战略家的角色是识别这些不完美之处，并培养他们去经营一个成功的企业。对于大公司，我们既有企业层面的策略师，也有企业层面的策略师。公司战略是当你在公司层面上工作时，回答诸如“什么是适合你公司的业务组合?”，“为了实现这个投资组合，你需要收购/投资/增长/关闭哪些新业务?”，“什么是适合您的企业的组织结构，可以促进运营和其他领域的协同效应?”例如，如果你为富国银行(Wells Fargo)的企业战略工作，你将建立一个战略，以收购或关闭投资/零售银行/信用卡等业务;您还将致力于创建全球运营，以消除单个企业的运营成本等等。商业战略更多的是与特定的业务联系在一起。虽然企业战略可能更侧重于企业层面的支出方面，但企业战略更侧重于实现净收入最大化。例如，富国银行(Wells Fargo)的信用卡策略师可能专注于将信用卡客户的收入最大化。许多操作可能是Well Fargo所有业务部门的共享资产，如呼叫中心、聊天中心、分支机构等。因此，这些费用项在公司级别而不是业务级别上得到了更好的优化。责任的分配可能会因公司而异，但大多数情况下，企业和企业战略师都是携手合作的。这两个角色都要求您通过创建各种业务场景和计算不同投资的净现值来评估产品特性更改、流程更改和技术投资带来的好处。分析专业人士非常适合担任这类角色，因为他们对数字的把握以及对将被用来创造竞争优势的最新技术的深刻理解。 数据科学家的角色对于大多数希望进入数据科学的人来说，这是最令人着迷的角色。数据科学家角色是专家的职位。你可以专攻不同类型的技能，如语音分析、文本分析(NLP)、图像处理、视频处理、医学模拟、材料模拟等等。这些专家角色的数量都非常有限，因此这些专家的价值是巨大的。这就是为什么我们现在看到对数据科学家的需求如此之高。要想在这些角色中脱颖而出，您需要不断更新最新的工具和技术。您还应该投资于相关语言的培训，并具备向客户和企业简单解释复杂模型的技能。]]></content>
      <categories>
        <category>数据挖掘</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[为什么不设置无穷大为0x7fffffff而是0x3f3f3f3f]]></title>
    <url>%2Funcategorized%2F%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%AE%BE%E7%BD%AE%E6%97%A0%E7%A9%B7%E5%A4%A7%E4%B8%BA0x7fffffff%E8%80%8C%E6%98%AF0x3f3f3f3f%2F</url>
    <content type="text"><![CDATA[把INF设置为0x3f3f3f3f的理由： 0x7fffffff不能满足“无穷大加一个有穷的数依然是无穷大”这个条件，它会变成了一个很小的负数。 更进一步的，如果有一个数能够满足“无穷大加无穷大依然是无穷大”，那么就更好了！ 而INF=0x3f3f3f3f，这个值的设置真的很精妙！ 0x3f3f3f3f的十进制是1061109567，是10^9级别的（和0x7fffffff一个数量级），而一般场合下的数据都是小于10^9的，所以它可以作为无穷大使用而不致出现数据大于无穷大的情形。 另一方面，由于一般的数据都不会大于10^9，所以当我们把无穷大加上一个数据时，它并不会溢出（这就满足了“无穷大加一个有穷的数依然是无穷大”），事实上0x3f3f3f3f+0x3f3f3f3f=2122219134，这非常大但却没有超过32-bit int的表示范围，所以0x3f3f3f3f还满足了我们“无穷大加无穷大还是无穷大”的需求。 最后，0x3f3f3f3f还能给我们带来一个意想不到的额外好处： 如果我们想要将某个数组清零，我们通常会使用memset(a,0,sizeof(a))，方便又高效，但是当我们想将某个数组全部赋值为无穷大时，就不能使用memset函数而得自己写循环了，因为memset是按字节操作的，它能够对数组清零是因为0的每个字节都是0（一般我们只有赋值为-1和0的时候才使用它）。现在好了，如果我们将无穷大设为0x3f3f3f3f，那么奇迹就发生了，0x3f3f3f3f的每个字节都是0x3f！所以要把一段内存全部置为无穷大，我们只需要memset(a,0x3f,sizeof(a))。 所以在通常的场合下，0x3f3f3f3f真的是一个非常棒的选择！ 转载自 https://blog.csdn.net/legalhighhigh/article/details/80089039]]></content>
  </entry>
  <entry>
    <title><![CDATA[花开甚折直须折,莫待无花空折枝]]></title>
    <url>%2F%E6%9D%82%E6%96%87%E9%9B%86%2F%E8%8A%B1%E5%BC%80%E7%94%9A%E6%8A%98%E7%9B%B4%E9%A1%BB%E6%8A%98-%E8%8E%AB%E5%BE%85%E6%97%A0%E8%8A%B1%E7%A9%BA%E6%8A%98%E6%9E%9D%2F</url>
    <content type="text"><![CDATA[“花开甚折直须折,莫待无花空折枝” 是什么意思？花开堪折直须折，莫待无花空折枝的意思是：不要等到花谢时只折了个空枝。花开宜折的时候就要抓紧去折。 该句出自杜秋娘的《金缕衣》，原文是：劝君莫惜金缕衣，劝君惜取少年时。花开堪折直须折，莫待无花空折枝。 原文的白话释义是：我劝你不要顾惜华贵的金缕衣，我劝你一定要珍惜青春少年时。不要等到花谢时只折了个空枝。花开宜折的时候就要抓紧去折。 杜秋娘是15岁时成了李锜的侍妾。元和二年（807年），李锜正式起兵造反。后来李錡造反失败，杜秋被纳入宫中。后受到唐宪宗宠幸。 12劝君莫惜金缕衣，劝君惜取少年时。花开堪折直须折，莫待无花空折枝。 扩展资料：《金缕衣》是唐朝时期的一首七言乐府，作者无名氏。这是一首富有哲理性、涵义深永的小诗。 它叫人们不要重视荣华富贵，而要爱惜少年时光，可以说它劝喻人们要及时摘取爱情的果实，也可以说是启示人们要及时建立功业，正因为它没有说得十分具体，反而更觉内涵丰富。 参考资料：百度百科-金缕衣]]></content>
      <categories>
        <category>杂文集</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[人生如逆旅，我亦是行人]]></title>
    <url>%2F%E6%9D%82%E6%96%87%E9%9B%86%2F%E4%BA%BA%E7%94%9F%E5%A6%82%E9%80%86%E6%97%85%EF%BC%8C%E6%88%91%E4%BA%A6%E6%98%AF%E8%A1%8C%E4%BA%BA%2F</url>
    <content type="text"><![CDATA[“人生如逆旅，我亦是行人”什么意思？“人生如逆旅，我亦是行人的。”翻译过来是“人生就是座旅店，我也就是个行人。”大意是说人生就是一趟艰难的旅程,你我都是那匆匆过客,就如在不同的客栈停了又走,走了又停.所以人不应为过往伤怀,而应豁达处事，不要徒增自己的烦恼。这两句出自苏轼的苏轼《临江仙：送钱穆父》原文如下: 123一别都门三改火，天涯踏尽红尘。依然一笑作春温。无波真古井，有节是秋筠。惆怅孤帆连夜发，送行淡月微云。尊前不用翠眉颦。人生如逆旅，我亦是行人。 扩展资料： 整体赏析 此词上片写与友人久别重逢。元祐初年，苏轼在朝为起居舍人，钱穆父为中书舍人，气类相善，友谊甚笃。元祐三年穆父出知越州，都门帐饮时，苏轼曾赋诗赠别。岁月如流．此次在杭州重聚，已是别后的第三个年头了。 三年来，穆父奔走于京城、吴越之间，此次又远赴瀛州，真可谓“天涯踏尽红尘”。分别虽久，可情谊弥坚，相见欢笑，犹如春日之和煦。更为可喜的是友人与自己都能以道自守，保持耿介风节，借用白居易《赠元稹》诗句来说，即“无波古井水，有节秋竹竿”。 作者认为，穆父出守越州，同自己一样，是由于在朝好议论政事，为言官所攻。以上数句，先从时间着笔，回忆前番离别，再就空间落墨，概述仕宦生涯，接下来抒发作者对仕宦失意、久处逆境所持的达观态度，并用对偶连喻的句式，通过对友人纯一道心、保持名节的赞颂，表明了自己淡泊的心境和坚贞的操守。 上片既是对友人辅君治国、坚持操守的安慰和支持，也是词人半生经历、松柏节操的自我写照，是词人的自勉自励，寓有强烈的身世之感。明写主，暗寓客；以主慰客，客与主同，表现出作者与友人肝胆相照，志同道合。]]></content>
      <categories>
        <category>杂文集</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Pycharm问题集]]></title>
    <url>%2Funcategorized%2FPycharm%E9%97%AE%E9%A2%98%E9%9B%86%2F</url>
    <content type="text"><![CDATA[[TOC] 问题集Pycharm import 本地模块时需要选择 make directory as -&gt;source root 才可以正常导入模块中的函数和类，提供自动提示功能 unittest 缺少win32api出错，添加 pywin32 包即可 unittest 提示 _jb_trialtest_runner.py: error: unrecognized arguments: --reporter=teamcity 是因为pycharm和teamcity-message不兼容，使用默认unittest框架即可。 12345678910111213import unittestfrom teamcity import is_running_under_teamcityfrom teamcity.unittestpy import TeamcityTestRunnerclass Test(unittest.TestCase): ...if __name__ == '__main__': if is_running_under_teamcity(): runner = TeamcityTestRunner() else: runner = unittest.TextTestRunner() unittest.main(testRunner=runner) pycharm 对于unittest会根据光标所在模块测试，最好光标点在 main函数或者全选 Matplotlib输出中文显示问题: 方法一：修改配置文件matplotlibrc 在matplotlib的安装路径：Python36\site-packages\matplotlib\mpl-data\matplotlibrc，文件中有如下内容： 12#font.family : sans-serif#font.sans-serif : Bitstream Vera Sans, Lucida Grande, Verdana, Geneva, Lucid, Anal, Helvetica, Avant Ga 方法二：动态设置参数（推荐方式） 在python脚本中动态设置matplotlibrc，这样就避免了更改配置文件的麻烦，方便灵活，例如: 12from pylab import mpl mpl.rcParams[‘font.sans-serif] = [‘SimHei’] 由于更改了字体导致显示不出负号，将配署文件中axes.unicode minus : True修改为Falsest就可以了，当然这而可以用代码来完成。 1234from pylab import mplmpl.rcParams[&apos;font.sans-serif&apos;] = [&apos;FangSong&apos;] # 指定默认字体mpl.rcParams[&apos;axes.unicode_minus&apos;] = False # 解决保存图像是负号&apos;-&apos;显示为方块的问题 方法三：使用字体管理器 python有个字体管理器，font_manager 12myfont = matplotlib.font_manager.FontProperties(fname=&apos;C:/Windows/Fonts/msyh.ttf&apos;) mpl.rcParams[&apos;axes.unicode_minus&apos;] = False 这是别人整理的Windows的字体对应名称，根据需要自行更换！ 黑体 SimHei 微软雅黑 Microsoft YaHei 微软正黑体 Microsoft JhengHei 新宋体 NSimSun 新细明体 PMingLiU 细明体 MingLiU 标楷体 DFKai-SB 仿宋 FangSong 楷体 KaiTi 仿宋_GB2312 FangSong_GB2312 楷体_GB2312 KaiTi_GB2312]]></content>
  </entry>
  <entry>
    <title><![CDATA[MARKDOWN指南翻译]]></title>
    <url>%2Funcategorized%2FMARKDOWN%E6%8C%87%E5%8D%97%E7%BF%BB%E8%AF%91%2F</url>
    <content type="text"><![CDATA[[TOC] Markdown指南翻译计划块状元素段落和行分割段落是一行或连续多行组成的一段文字。在Markdown源代码中，段落被大于一行的空白行所分割。在Typora，你只需要按下 Return 键来开始一个新的段落。 按下 Shift+Return 来创建单行分割。然而大部分markdown编辑器将会忽略你的行分割，你可以在行尾加上两空格或者输入 &lt;br/&gt;. 标题标题使用1-6个#字符放在开头表示1-6种不同的大小。例如： 123# This is an H1## This is an H2###### This is an H6 在Typora，输入 # 后跟着标题内容，按下 Return键会自动生成相应格式的标题。 块状引用Markdown使用电子邮件格式的 &gt; 字符用于块状引用。如下方展示： 123&gt; This is a blockquote with two paragraphs. This is first paragraph.&gt;&gt; This is second paragraph. 在Typora，只需在引用前输入 &gt; 一个块状引用会立刻生成。Typora会插入一个适当的 &gt; 或行分割。块状引用同样允许嵌套使用。 列表输入 *list item 1 会生成一个无序列表，* 符号同样也可以换成 + 或者 - 。输入 1. list item 1 会生成一个有序列表，它们的 Markdown 语法如下所示： 123456789## un-ordered list* Red* Green* Blue## ordered list1. Red2. Green3. Blue 任务列表任务列表是一系列标记着[]或者[x]（未完成或者完成）的列表。如下所示： 1234- [ ] a task list item- [ ] list syntax required- [ ] normal **formatting**, @mentions, #1234 refs- [x] completed 你可以通过点击复选框来改变完成/未完成状态。 （使用围栏）代码块Typora只支持Github风格的Markdown代码块，原始Markdown风格的代码块不被支持。 使用代码块很方便：输入` 按下回车或者使用快捷键Ctrl+Alt+K 。如下所示 123456789101112Here&apos;s an example:function test() &#123; console.log(&quot;notice the blank line before this function?&quot;);&#125;syntax highlighting:rubyrequire &apos;redcarpet&apos;markdown = Redcarpet.new(&quot;Hello World!&quot;)puts markdown.to_html 数学公式块你可以使用MathJax来渲染LaTeX 数学公式. 要添加一个数学公式，输入$$$$然后按下Return。这个操作会出发一个输入域展示Tex/LaTeX 源代码。如下所示： $V1×V2=∣∣∣∣∣∣i∂X∂u∂X∂vj∂Y∂u∂Y∂vk00∣∣∣∣∣∣V1×V2=|ijk∂X∂u∂Y∂u0∂X∂v∂Y∂v0|$ \mathbf{V}_1 \times \mathbf{V}_2 = \begin{vmatrix} \mathbf{i} & \mathbf{j} & \mathbf{k} \\ \frac{\partial X}{\partial u} & \frac{\partial Y}{\partial u} & 0 \\ \frac{\partial X}{\partial v} & \frac{\partial Y}{\partial v} & 0 \\ \end{vmatrix}1234567$$\mathbf&#123;V&#125;_1 \times \mathbf&#123;V&#125;_2 = \begin&#123;vmatrix&#125; \mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp; \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp; \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\\end&#123;vmatrix&#125;$$ ==你可以在这个网址发现更多细节。== 表格输入 |第一标题|第二标题| 然后按 Return 键。这会产生一个两列的表格。快捷键 Ctrl+T 在表格创建以后，处于焦点的表格会弹出一个工具栏，你可以改变大小，使对齐，或者删除表格。你也可以用菜单中的项目来复制表格，添加/删除单独的列或者行。 完整的表格语法如下所示，但是没有必要知道具体细节，因为Typora会自动生成表格的markdown语法。 1234| First Header | Second Header || ------------- | ------------- || Content Cell | Content Cell || Content Cell | Content Cell | 你也可以加入内联markdown语法类似于链接，加粗，斜体或者删除线（strike through）。 最后，通过在第一行下方的线内定义格式，你可以决定文本左/中/右对齐： 12345| Left-Aligned | Center Aligned | Right Aligned || :------------ |:---------------:| -----:|| col 3 is | some wordy text | $1600 || col 2 is | centered | $12 || zebra stripes | are neat | $1 | 一个左边的单冒号说明是左对齐；一个右边的单冒号说明是右对齐；两边冒号说明中间对齐。 脚注123You can create footnotes like this[^footnote].[^footnote]: Here is the *text* of the **footnote**. 就像这样 ：文本脚注 分割线输入--- 然后按 Return会显示一条分割线 YAML格式在文章的开头输入 ---然后按下Return产生一个元数据块，另外你也可以在菜单里面找到该选项。 目录（TOC）输入[toc] 然后按下 Return键，这回生成一个目录块，抽取文章里面所有的子标题，并且会动态更新。 行内元素行内元素会转换并且实时渲染。将鼠标放在行内元素上，会以markdown源码的形式展现出。 超链接markdown支持两种风格的链接：内联和引用。 两种风格的链接同时需要被[]包围。 为了创建一个内联链接，使用一对圆括号()紧跟在方括号[]后面。在圆括号内部，放入URL，同时也可以加入双引号包围的标题。如下所示： 123This is [an example](http://example.com/ "Title") inline link.[This link](http://example.net/) has no title attribute. This is an example in-line link. (&lt;p&gt;This is &lt;a href=&quot;http://example.com/&quot; title=&quot;Title&quot;&gt;) This link](http://example.net/) has no title attribute. (&lt;p&gt;&lt;a href=&quot;http://example.net/&quot;&gt;This link&lt;/a&gt; has no) 内部链接你可以设置对标题进行超链接引用，会生成一个书签允许你跳转到选定的位置。 例如，按下Ctrl+点击this 会转向笔记头部 参考文献链接：参考文献的链接使用第二种方块，在内部你可以放置一个你选择的标记去：12345This is [an example][id] reference-style link.Then, anywhere in the document, you define your link label like this, on a line by itself: [id]: http://example.com/ "Optional Title Here" 在 Typora ，这会被渲染成这样： 这是一个 [id]: http://example.com/ “Optional Title Here”]]></content>
  </entry>
  <entry>
    <title><![CDATA[第一篇博文]]></title>
    <url>%2Funcategorized%2F%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E6%96%87%2F</url>
    <content type="text"><![CDATA[欢迎光临我的小站经验、笔记的分享小库]]></content>
  </entry>
</search>
